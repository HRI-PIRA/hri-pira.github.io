!function(e){var t={};function n(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(a,o,function(t){return e[t]}.bind(null,o));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){const n={low_activity_lying:.45,low_activity:.54,singing:.65,mid_activity:.9,sports:1.2,test_1:.54,test_2:.65};function a(e){return"singing"==e?3500:"test_2"==e?2500:100}function o(e){const t=2.7618*(Math.exp(1.1761*3.35)-1),o=a("low_activity");return t*(a(e)/o)*(n[e]/n.low_activity)}function l(e,t,n,a){let o=390625*t+225625;return o*=Math.exp(t*a),o-=225625,o*=Math.exp(-t*a-.5776*a),o=390625*t-o,o*=e,o/(n*(225625*t+130321))}function i(e,t,a,i){0==t&&(t+=.01),console.log(`Calculating pira for: t=${e}, Q=${t}, activity=${a}, V=${i}`);const u=function(e,t){return e/t}(i,t),r=o(a),d=function(e,t){return e*Math.exp(-.5776*t)}(r,u),c=function(e,t){return t/e}(i,t);if(e>u){const o=l(r,c,t,u);let i=function(e,t,n,a,o){return e*(t*o+Math.exp(-t*o)-1/Math.E-1)/(a*t)}(d,c,0,t,e);return 1-Math.exp(-(o+i)*n[a])}{const o=l(r,c,t,e);return 1-Math.exp(-o*n[a])}}e.exports={prepareData:function(e,t,n){const a=e;let o=[],l=[],u=[];const r=n;for(let e=50;e<=r;e+=50){o=[];let n=[];for(let l=0;l<=6;l+=.1)p=i(l,e,t,a),p=Math.round(1e4*p)/100,n.push(p),o.push(l);l.push(e),u.push(n)}return{test:o,x:o,y:l,z:u}},prepareDataSimple:function(e,t,n,a){const o=e;console.log("Total airflow for all people in the room is (Q) is "+n);let l=[],u=[],r=[],d=[];for(let e=0;e<=6;e+=1){p=i(e,n,t,o),p=Math.round(1e4*p)/100,u.push(p),l.push(e),r.push(e),d.push(Math.round(p*a/100));for(let a=.1;a<1;a+=.1)p=i(e+a,n,t,o),p=Math.round(1e4*p)/100,u.push(p),l.push(e+a)}return[{x:l,y:u},{x:r,y:d}]},pira:i,f_qa:o,f_Q:function(e){return"very_bad"==e?10:"bad"==e?20:"ok"==e?30:"good"==e?40:"very_good"==e?60:void 0}}},function(e,t,n){const a=n(0).prepareData,o=n(0).prepareDataSimple,l=n(0).f_Q;var i=document.getElementById("volume").value,u=document.getElementById("activity").value,r=document.getElementById("mode").value,d=document.getElementById("airing").value,c=document.getElementById("people").value,s=-1;g();var p=-1;f();const m=document.getElementById("chart");function g(){s=l(d)*c,document.getElementById("usedQ").value=s}function f(){p=l("very_good")*c,document.getElementById("maxQ").value=p}function y(){console.log("The graph must be updated!"),console.log(`Volume: ${i}, activity: ${u}, airing: ${d}`),"simple"===r?(data=o(i,u,s,c),function(e){e[0].mode="lines",e[0].name="PIRA (in %)",e[0].yaxis="y",e[1].type="bar",e[1].yaxis="y2",e[1].name="Potentiell Angesteckte",console.log(e);var t={shareX:!0,xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:"PIRA (in %)",overlaying:"y2",tickvals:[10,20,30,40,50,60,70,80,90,100],range:[0,100]},yaxis2:{tickmode:"auto",title:"Anzahl sich potentiell angesteckter Personen (gerundet)",side:"right",range:[0,c]},legend:{y:1,x:0}};Plotly.newPlot(m,e,t,{responsive:!0})}(data)):"expert"===r&&(data=a(i,u,p),function(e){e.type="contour",e.colorbar={title:"PIRA",ticksuffix:"%"},e.hovertemplate="PIRA: %{z:.2f}%<extra></extra>";console.log(e),Plotly.newPlot(m,[e],{showaxeslabels:!0,xaxis_title:"Zeit in Stunden",xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:{text:"Volumenstrom in mÂ³/h"}}},{responsive:!0})}(data))}e.exports={modeUpdated:function(e){r=e,y()},volumeUpdated:function(e){i=e,y()},activityUpdated:function(e){u=e,y()},airingUpdated:function(e){d=e,g(),y()},vistypeUpdated:function(e){vistype=e,y()},peopleUpdated:function(e){c=e,g(),f(),y()},usedQUpdated:function(e){s=e,y()},maxQUpdated:function(e){p=e,y()}}},function(e,t,n){n(3);const a=n(1);document.getElementById("mode").addEventListener("input",(function(e){if("expert"==e.target.value){for(el of(simpelElements=document.getElementsByClassName("simple"),simpelElements))el.style.display="none";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="block"}else if("simple"==e.target.value){for(el of(expertElements=document.getElementsByClassName("simple"),expertElements))el.style.display="block";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="none"}a.modeUpdated(e.target.value)})),document.getElementById("activity").addEventListener("input",(function(e){a.activityUpdated(e.target.value)})),document.getElementById("people").addEventListener("input",(function(e){""!=e.target.value&&(amount=e.target.value,(1>amount||amount>100)&&(amount=3,e.target.value=amount),a.peopleUpdated(amount))})),document.getElementById("airing").addEventListener("change",(function(e){a.airingUpdated(e.target.value)})),document.getElementById("usedQ").addEventListener("change",(function(e){e.target.value<1?e.target.value=1:e.target.value>6e3&&(e.target.value=6e3),a.usedQUpdated(e.target.value)})),document.getElementById("maxQ").addEventListener("change",(function(e){e.target.value<100?e.target.value=100:e.target.value>6e3&&(e.target.value=6e3),a.maxQUpdated(e.target.value)}))},function(e,t,n){const a=n(1);function o(e,t){this.data=t,this.element=e,e.value=t,e.addEventListener("change",this,!1)}function l(){i.data>10&&i.change(10),i.data<1&&i.change(1),u.data>10&&i.change(10),u.data<1&&i.change(1),r.data>5&&i.change(5),r.data<1&&i.change(1);const e=i.data*u.data*r.data;return console.log(e),document.getElementById("volume").value=e,a.volumeUpdated(e),e}o.prototype.handleEvent=function(e){switch(e.type){case"change":this.change(this.element.value),l()}},o.prototype.change=function(e){this.data=e,this.element.value=e};var i=new o(document.getElementById("length"),document.getElementById("length").value),u=new o(document.getElementById("width"),document.getElementById("width").value),r=new o(document.getElementById("height"),document.getElementById("height").value);l(),e.exports={get:l,init:l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dyYXBoLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdm9sdW1lLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUWIiLCJsb3dfYWN0aXZpdHlfbHlpbmciLCJsb3dfYWN0aXZpdHkiLCJzaW5naW5nIiwibWlkX2FjdGl2aXR5Iiwic3BvcnRzIiwidGVzdF8xIiwidGVzdF8yIiwiZl9FIiwiYWN0aXZpdHkiLCJmX3FhIiwicV8wIiwiTWF0aCIsImV4cCIsIkVfMCIsImZfQyIsInFhIiwiQUNIIiwiUSIsInBpcmEiLCJWIiwiY29uc29sZSIsImxvZyIsInRhdSIsImZfdGF1IiwicWF0YXUiLCJmX3FhdGF1IiwiZl9BQ0giLCJDIiwiQ3RhdSIsIkUiLCJmX0N0YXUiLCJwcmVwYXJlRGF0YSIsInZvbHVtZSIsIm1heFEiLCJ4QSIsInlBIiwicm93cyIsIm1heCIsInJvdyIsInJvdW5kIiwicHVzaCIsInRlc3QiLCJ4IiwieSIsInoiLCJwcmVwYXJlRGF0YVNpbXBsZSIsInBlb3BsZSIsIngyIiwieTIiLCJzdCIsImZfUSIsImFpcmluZyIsImRhdGFGIiwiZGF0YUZTaW1wbGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidXNlZFEiLCJjYWxjdWxhdGVVc2VkUSIsImNhbGN1bGF0ZU1heFEiLCJjaGFydERpdiIsInVwZGF0ZUdyYXBoIiwiZGF0YSIsInlheGlzIiwidHlwZSIsImxheW91dCIsInNoYXJlWCIsInhheGlzIiwidGl0bGUiLCJ0ZXh0Iiwib3ZlcmxheWluZyIsInRpY2t2YWxzIiwicmFuZ2UiLCJ5YXhpczIiLCJ0aWNrbW9kZSIsInNpZGUiLCJsZWdlbmQiLCJQbG90bHkiLCJuZXdQbG90IiwicmVzcG9uc2l2ZSIsImRyYXdTaW1wbGVQbG90IiwiY29sb3JiYXIiLCJ0aWNrc3VmZml4IiwiaG92ZXJ0ZW1wbGF0ZSIsInNob3dheGVzbGFiZWxzIiwieGF4aXNfdGl0bGUiLCJkcmF3Q29udG91clBsb3QiLCJtb2RlVXBkYXRlZCIsIm5ld01vZGUiLCJ2b2x1bWVVcGRhdGVkIiwibmV3Vm9sdW1lIiwiYWN0aXZpdHlVcGRhdGVkIiwibmV3QWN0aXZpdHkiLCJhaXJpbmdVcGRhdGVkIiwibmV3QWlyaW5nIiwidmlzdHlwZVVwZGF0ZWQiLCJuZXdWaXNUeXBlIiwidmlzdHlwZSIsInBlb3BsZVVwZGF0ZWQiLCJuZXdQZW9wbGUiLCJ1c2VkUVVwZGF0ZWQiLCJuZXdVc2VkUSIsIm1heFFVcGRhdGVkIiwibmV3TWF4USIsImdyYXBoIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFyZ2V0IiwiZWwiLCJzaW1wZWxFbGVtZW50cyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJleHBlcnRFbGVtZW50cyIsImFtb3VudCIsIklucHV0RWxlbWVudCIsImVsZW1lbnQiLCJ0aGlzIiwidXBkYXRlVm9sdW1lIiwibGVuZ3RoRWxlbWVudCIsImNoYW5nZSIsIndpZHRoRWxlbWVudCIsImhlaWdodEVsZW1lbnQiLCJoYW5kbGVFdmVudCIsImluaXQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlB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LE1BQ1osSUFBSyxTQUNIcUQsS0FBS0csT0FBT0gsS0FBS0QsUUFBUW5JLE9BQ3pCcUksTUFPTkgsRUFBYXZILFVBQVU0SCxPQUFTLFNBQVV2SSxHQUN4Q29JLEtBQUt2RCxLQUFPN0UsRUFDWm9JLEtBQUtELFFBQVFuSSxNQUFRQSxHQWlDdkIsSUFBSXNJLEVBQWdCLElBQUlKLEVBQ3RCNUQsU0FBU0MsZUFBZSxVQUN4QkQsU0FBU0MsZUFBZSxVQUFVdkUsT0FFaEN3SSxFQUFlLElBQUlOLEVBQ3JCNUQsU0FBU0MsZUFBZSxTQUN4QkQsU0FBU0MsZUFBZSxTQUFTdkUsT0FFL0J5SSxFQUFnQixJQUFJUCxFQUN0QjVELFNBQVNDLGVBQWUsVUFDeEJELFNBQVNDLGVBQWUsVUFBVXZFLE9BRXBDcUksSUFFQXZKLEVBQU9ELFFBQVUsQ0FDZmUsSUFBS3lJLEVBQ0xNLEtBQU1OIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsImNvbnN0IFFiID0ge1xuICBsb3dfYWN0aXZpdHlfbHlpbmc6IDAuNDUsXG4gIGxvd19hY3Rpdml0eTogMC41NCxcbiAgc2luZ2luZzogMC42NSxcbiAgbWlkX2FjdGl2aXR5OiAwLjksXG4gIHNwb3J0czogMS4yLFxuICB0ZXN0XzE6IDAuNTQsIC8vIHZhbHVlIHVzZWQgaW4gdGVzdF9kYXRhL1BJUl9Nb2RlbGwuanBnXG4gIHRlc3RfMjogMC42NSwgLy8gdmFsdWUgdXNlZCBpbiB0ZXN0X2RhdGEvUElSX01vZGVsbF9ha3QuanBnIGFzIGluc3RydWN0ZWQgYnkgbWFpbFxufTtcblxuZnVuY3Rpb24gZl90YXUoViwgUSkge1xuICByZXR1cm4gViAvIFE7XG59XG5cbmZ1bmN0aW9uIGZfRShhY3Rpdml0eSkge1xuICBpZiAoYWN0aXZpdHkgPT0gXCJzaW5naW5nXCIpIHtcbiAgICByZXR1cm4gMzUwMDtcbiAgfSBlbHNlIGlmIChhY3Rpdml0eSA9PVwidGVzdF8yXCIpIHtcbiAgICByZXR1cm4gMjUwMDsgLy8gdmFsdWUgcmVjZWl2ZWQgdmlhIG1haWwgZnJvbSBrcmllZ2VsXG4gIH0gZWxzZSByZXR1cm4gMTAwO1xufVxuXG5mdW5jdGlvbiBmX1EoYWlyaW5nKSB7XG4gIGlmIChhaXJpbmcgPT0gXCJ2ZXJ5X2JhZFwiKSB7XG4gICAgcmV0dXJuIDEwO1xuICB9IGVsc2UgaWYgKGFpcmluZyA9PSBcImJhZFwiKSB7XG4gICAgcmV0dXJuIDIwO1xuICB9IGVsc2UgaWYgKGFpcmluZyA9PSBcIm9rXCIpIHtcbiAgICByZXR1cm4gMzA7XG4gIH0gZWxzZSBpZiAoYWlyaW5nID09IFwiZ29vZFwiKSB7XG4gICAgcmV0dXJuIDQwO1xuICB9IGVsc2UgaWYgKGFpcmluZyA9PSBcInZlcnlfZ29vZFwiKSB7XG4gICAgcmV0dXJuIDYwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZfcWEoYWN0aXZpdHkpIHtcbiAgY29uc3QgUl8wID0gMy4zNTtcbiAgY29uc3QgcV8wID0gMi43NjE4ICogKE1hdGguZXhwKDEuMTc2MSAqIFJfMCkgLSAxKTtcblxuICBjb25zdCBFXzAgPSBmX0UoXCJsb3dfYWN0aXZpdHlcIik7XG4gIGNvbnN0IEUgPSBmX0UoYWN0aXZpdHkpO1xuXG4gIHJldHVybiBxXzAgKiAoRSAvIEVfMCkgKiAoUWJbYWN0aXZpdHldIC8gUWIubG93X2FjdGl2aXR5KTtcbn1cblxuZnVuY3Rpb24gZl9xYXRhdShxYSwgdGF1KSB7XG4gIHJldHVybiBxYSAqIE1hdGguZXhwKC0wLjU3NzYgKiB0YXUpO1xufVxuXG5mdW5jdGlvbiBmX0FDSChWLCBRKSB7XG4gIHJldHVybiBRIC8gVjtcbn1cblxuZnVuY3Rpb24gZl9DKHFhLCBBQ0gsIFEsIHQpIHtcbiAgLy8gbnVtZXJhdG9yXG5cbiAgbGV0IG4gPSAzOTA2MjUgKiBBQ0ggKyAyMjU2MjU7XG4gIC8vIGNvbnNvbGUubG9nKG4pO1xuICBuID0gbiAqIE1hdGguZXhwKEFDSCAqIHQpO1xuICAvLyBjb25zb2xlLmxvZyhuKTtcbiAgbiA9IG4gLSAyMjU2MjU7XG4gIC8vIGNvbnNvbGUubG9nKG4pO1xuICBuID0gbiAqIE1hdGguZXhwKC1BQ0ggKiB0IC0gKDM2MSAvIDYyNSkgKiB0KTtcbiAgLy8gY29uc29sZS5sb2cobik7XG4gIG4gPSAzOTA2MjUgKiBBQ0ggLSBuO1xuICAvLyBjb25zb2xlLmxvZyhuKTtcbiAgbiA9IHFhICogbjtcblxuICAvLyBjb25zb2xlLmxvZyhuKTtcbiAgLy8gY29uc29sZS5sb2cocWEpO1xuICAvLyBjb25zb2xlLmxvZyhBQ0gpO1xuICAvLyBjb25zb2xlLmxvZyhRKTtcbiAgLy8gY29uc29sZS5sb2coXCJ0OiBcIiArIHQpO1xuXG4gIC8vIGNvbnNvbGUubG9nKG4pO1xuICAvLyBkZW5vbWluYXRvclxuICBsZXQgZCA9IFEgKiAoMjI1NjI1ICogQUNIICsgMTMwMzIxKTtcbiAgLy8gY29uc29sZS5sb2coZCk7XG5cbiAgcmV0dXJuIG4gLyBkO1xufVxuXG5mdW5jdGlvbiBmX0N0YXUocWF0YXUsIEFDSCwgdGF1LCBRLCB0KSB7XG4gIC8vIG51bWVyYXRvclxuICAvLyBsZXQgbiA9IHFhdGF1ICogTWF0aC5leHAoLUFDSCAqICh0ICsgdGF1KSkgKiAoQUNIICogKHQgLSB0YXUpICogTWF0aC5leHAoQUNIICogKHQgKyB0YXUpKSAtIE1hdGguZXhwKEFDSCAqIHQpICsgTWF0aC5leHAoQUNIICogdGF1KSk7XG4gIC8vIGxldCBuID0gcWF0YXUgKiBNYXRoLmV4cCgtQUNIICogdCAtIDEpICogKChBQ0ggKiB0IC0gMSkgKiBNYXRoLmV4cChBQ0ggKiB0ICsgMSkgLSBNYXRoLmV4cChBQ0ggKiB0KSArIE1hdGguZXhwKDEpKTtcbiAgbGV0IG4gPSBxYXRhdSAqIChBQ0ggKiB0ICsgTWF0aC5leHAoLUFDSCAqIHQpIC0gMS9NYXRoLkUgLSAxKVxuXG4gIC8vIGRlbm9taW5hdG9yXG4gIGxldCBkID0gUSAqIEFDSDtcblxuICByZXR1cm4gbiAvIGQ7XG59XG5cbmZ1bmN0aW9uIHBpcmEodCwgUSwgYWN0aXZpdHksIFYpIHtcbiAgaWYgKFEgPT0gMCkgUSArPSAwLjAxO1xuICBjb25zb2xlLmxvZyhgQ2FsY3VsYXRpbmcgcGlyYSBmb3I6IHQ9JHt0fSwgUT0ke1F9LCBhY3Rpdml0eT0ke2FjdGl2aXR5fSwgVj0ke1Z9YCk7XG4gIGNvbnN0IHRhdSA9IGZfdGF1KFYsIFEpO1xuICAvLyBjb25zb2xlLmxvZyhcInRhdTogXCIgKyB0YXUpO1xuICBjb25zdCBxYSA9IGZfcWEoYWN0aXZpdHkpO1xuICAvLyBjb25zb2xlLmxvZyhcInFhOiBcIiArIHFhKTtcbiAgY29uc3QgcWF0YXUgPSBmX3FhdGF1KHFhLCB0YXUpO1xuICAvLyBjb25zb2xlLmxvZyhcInFhdGF1OiBcIiArIHFhdGF1KTtcbiAgY29uc3QgQUNIID0gZl9BQ0goViwgUSk7XG4gIC8vIGNvbnNvbGUubG9nKFwiQUNIOiBcIiArIEFDSCk7XG4gIC8vIGNvbnNvbGUubG9nKFwiUWI6IFwiICsgUWJbYWN0aXZpdHldKTtcblxuICBpZiAodCA+IHRhdSkge1xuICAgIGNvbnN0IEMgPSBmX0MocWEsIEFDSCwgUSwgdGF1KTtcbiAgICAvLyBjb25zb2xlLmxvZyhDKTtcbiAgICBsZXQgQ3RhdSA9IGZfQ3RhdShxYXRhdSwgQUNILCB0YXUsIFEsIHQpO1xuICAgIC8vIGlmIChpc05hTihDdGF1KSkge1xuICAgIC8vICAgICBDdGF1ID0gMVxuICAgIC8vIH1cbiAgICAvLyBjb25zb2xlLmxvZyhDdGF1KTtcbiAgICByZXR1cm4gMSAtIE1hdGguZXhwKC0oQyArIEN0YXUpICogUWJbYWN0aXZpdHldKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBDID0gZl9DKHFhLCBBQ0gsIFEsIHQpO1xuICAgIC8vIGNvbnNvbGUubG9nKEMpO1xuICAgIHJldHVybiAxIC0gTWF0aC5leHAoLUMgKiBRYlthY3Rpdml0eV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVEYXRhKHZvbHVtZSwgYWN0aXZpdHksIG1heFEpIHtcbiAgY29uc3QgViA9IHZvbHVtZTtcblxuICBsZXQgeEEgPSBbXTtcbiAgbGV0IHlBID0gW107XG4gIGxldCByb3dzID0gW107XG5cbiAgY29uc3QgbWluID0gNTBcbiAgY29uc3QgbWF4ID0gbWF4UVxuXG4gIGZvciAobGV0IFEgPSBtaW47IFEgPD0gbWF4OyBRICs9IDUwKSB7XG4gICAgeEEgPSBbXTtcbiAgICBsZXQgcm93ID0gW107XG5cbiAgICBmb3IgKGxldCB0ID0gMC4wOyB0IDw9IDYuMDsgdCArPSAwLjEpIHtcbiAgICAgIC8vIGhvdXJzLCsgaW5jcmVtZW50cyBpbiBob3Vyc1xuICAgICAgcCA9IHBpcmEodCwgUSwgYWN0aXZpdHksIFYpO1xuICAgICAgLy9jb25zb2xlLmxvZyhcIlBpcmEgZm9yIHQ9XCIgKyB0ICsgXCIsIFE9XCIgKyBRICsgXCI6IFwiICsgcCk7XG4gICAgICBwID0gTWF0aC5yb3VuZChwICogMTAwMDApIC8gMTAwO1xuICAgICAgLy9pZiAodCA9PSA2ICYmIFEgPT0gNTAwKSBwID0gMTAwO1xuICAgIC8vICAgaWYgKGlzTmFOKHApIHx8IHAgPj0gMTAwKSB7XG4gICAgLy8gICAgICAgcCA9IDBcbiAgICAvLyAgIH1cbiAgICAgIHJvdy5wdXNoKHApO1xuICAgICAgeEEucHVzaCh0KTtcbiAgICB9XG4gICAgeUEucHVzaChRKTtcbiAgICByb3dzLnB1c2gocm93KTtcbiAgfVxuXG4gIC8vIGZvciAobGV0IG1pbnV0ZSA9IDA7IG1pbnV0ZSA8PSAzNjA7IG1pbnV0ZSArPSAzMCkge1xuICAvLyAgICAgbGV0IHQgPSBtaW51dGUgLyA2MDtcbiAgLy8gICAgIGxldCBtID0gbWludXRlICUgNjA7XG4gIC8vICAgICBsZXQgaCA9IChtaW51dGUgLSBtKSAvIDYwO1xuICAvLyAgICAgbGV0IHRpbWUgPSBoICsgXCI6XCIgKyBtICsgXCJoXCI7XG4gIC8vIH1cblxuICByZXR1cm4ge1xuICAgIHRlc3Q6IHhBLFxuICAgIHg6IHhBLFxuICAgIHk6IHlBLFxuICAgIHo6IHJvd3NcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZURhdGFTaW1wbGUodm9sdW1lLCBhY3Rpdml0eSwgUSwgcGVvcGxlKSB7XG4gIGNvbnN0IFYgPSB2b2x1bWU7XG4gXG4gIGNvbnNvbGUubG9nKGBUb3RhbCBhaXJmbG93IGZvciBhbGwgcGVvcGxlIGluIHRoZSByb29tIGlzIChRKSBpcyAke1F9YClcblxuICBsZXQgeCA9IFtdO1xuICBsZXQgeSA9IFtdOyAvLyBwaXJhXG4gIGxldCB4MiA9IFtdOyAvLyBvbmx5IHRpbWVzdGFtcHMgZm9yIHRoZSBmdWxsIGhvdXJcbiAgbGV0IHkyID0gW107IC8vIGluZmVjdGVkIHBlb3BsZVxuXG4gIGZvciAobGV0IHQgPSAwOyB0IDw9IDY7IHQgKz0gMSkge1xuICAgIHAgPSBwaXJhKHQsIFEsIGFjdGl2aXR5LCBWKTtcbiAgICBwID0gTWF0aC5yb3VuZChwICogMTAwMDApIC8gMTAwO1xuICAgIHkucHVzaChwKTtcbiAgICB4LnB1c2godCk7XG4gICAgeDIucHVzaCh0KVxuICAgIHkyLnB1c2goTWF0aC5yb3VuZChwICogcGVvcGxlIC8gMTAwKSk7XG4gICAgLy8gaW50ZXJtZWRpYXRlIHN0ZXBzIGZvciBwaXJhIG9ubHksIG5vdCBmb3Igbm8uIGluZmVjdGVkIHBlb3BsZVxuICAgIGZvciAobGV0IHN0ID0gMC4xOyBzdCA8IDE7IHN0ICs9IDAuMSkge1xuICAgICAgICBwID0gcGlyYSh0ICsgc3QsIFEsIGFjdGl2aXR5LCBWKTtcbiAgICAgICAgcCA9IE1hdGgucm91bmQocCAqIDEwMDAwKSAvIDEwMDtcbiAgICAgICAgeS5wdXNoKHApO1xuICAgICAgICB4LnB1c2godCArIHN0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5XG4gICAgfSxcbiAgICB7XG4gICAgICB4OiB4MixcbiAgICAgIHk6IHkyXG4gICAgfVxuICBdO1xuXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHByZXBhcmVEYXRhOiBwcmVwYXJlRGF0YSxcbiAgICBwcmVwYXJlRGF0YVNpbXBsZTogcHJlcGFyZURhdGFTaW1wbGUsXG4gICAgcGlyYTogcGlyYSxcbiAgICBmX3FhOiBmX3FhLFxuICAgIGZfUTogZl9RXG59XG4iLCJjb25zdCBkYXRhRiA9IHJlcXVpcmUoXCIuL2RhdGEuanNcIikucHJlcGFyZURhdGE7XG5jb25zdCBkYXRhRlNpbXBsZSA9IHJlcXVpcmUoXCIuL2RhdGEuanNcIikucHJlcGFyZURhdGFTaW1wbGU7XG5jb25zdCBmX1EgPSByZXF1aXJlKFwiLi9kYXRhLmpzXCIpLmZfUTtcbi8vIGNvbnN0IFBsb3RseSA9IHJlcXVpcmUoXCJwbG90bHkuanMtZ2wzZC1kaXN0LW1pblwiKSAvLyBub3QgaW5zdGFsbGVkIHZpYSBucG0gdG8gcmVkdWNlIGJ1bmRsZSBzaXplXG5cbnZhciB2b2x1bWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZvbHVtZVwiKS52YWx1ZTtcbnZhciBhY3Rpdml0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWN0aXZpdHlcIikudmFsdWU7XG4vLyB2YXIgdmlzdHlwZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlzdHlwZVwiKS52YWx1ZTtcbnZhciBtb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RlXCIpLnZhbHVlOyAvLyBzaW1wbGUgb3IgZXhwZXJ0XG52YXIgYWlyaW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhaXJpbmdcIikudmFsdWU7IC8vIGluIHRoZSBmb3JtdWxhLCB0aGlzIGlzIFFcbnZhciBwZW9wbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBlb3BsZVwiKS52YWx1ZTtcbnZhciB1c2VkUSA9IC0xO1xuY2FsY3VsYXRlVXNlZFEoKTtcbnZhciBtYXhRID0gLTE7XG5jYWxjdWxhdGVNYXhRKCk7XG5cbmNvbnN0IGNoYXJ0RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGFydFwiKTtcblxuZnVuY3Rpb24gbW9kZVVwZGF0ZWQobmV3TW9kZSkge1xuICBtb2RlID0gbmV3TW9kZTtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gdm9sdW1lVXBkYXRlZChuZXdWb2x1bWUpIHtcbiAgdm9sdW1lID0gbmV3Vm9sdW1lO1xuICB1cGRhdGVHcmFwaCgpO1xufVxuXG5mdW5jdGlvbiBhY3Rpdml0eVVwZGF0ZWQobmV3QWN0aXZpdHkpIHtcbiAgYWN0aXZpdHkgPSBuZXdBY3Rpdml0eTtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gYWlyaW5nVXBkYXRlZChuZXdBaXJpbmcpIHtcbiAgYWlyaW5nID0gbmV3QWlyaW5nO1xuICBjYWxjdWxhdGVVc2VkUSgpXG4gIHVwZGF0ZUdyYXBoKCk7XG59XG5cbmZ1bmN0aW9uIHBlb3BsZVVwZGF0ZWQobmV3UGVvcGxlKSB7XG4gIHBlb3BsZSA9IG5ld1Blb3BsZTtcbiAgY2FsY3VsYXRlVXNlZFEoKVxuICBjYWxjdWxhdGVNYXhRKClcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gdmlzdHlwZVVwZGF0ZWQobmV3VmlzVHlwZSkge1xuICB2aXN0eXBlID0gbmV3VmlzVHlwZTtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuLy8gdXNlZFEgdXBkYXRlZCBieSBtYW51YWwgdXNlciBpbnB1dFxuZnVuY3Rpb24gdXNlZFFVcGRhdGVkKG5ld1VzZWRRKSB7XG4gIHVzZWRRID0gbmV3VXNlZFE7XG4gIHVwZGF0ZUdyYXBoKCk7XG59XG5cbi8vIHJlY2FsY3VsYXRlIHVzZWRRIGJhc2VkIG9uIGFpcmluZyBhbmQgcGVvcGxlXG5mdW5jdGlvbiBjYWxjdWxhdGVVc2VkUSgpIHtcbiAgdXNlZFEgPSBmX1EoYWlyaW5nKSAqIHBlb3BsZTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VkUVwiKS52YWx1ZSA9IHVzZWRRXG59XG5cbi8vIG1heFEgdXBkYXRlZCBieSBtYW51YWwgdXNlciBpbnB1dFxuZnVuY3Rpb24gbWF4UVVwZGF0ZWQobmV3TWF4USkge1xuICBtYXhRID0gbmV3TWF4UVxuICB1cGRhdGVHcmFwaCgpXG59XG5cbi8vIHJlY2FsY3VsYXRlIG1heFEgYmFzZWQgb24gcGVvcGxlIGFuZCB2ZXJ5X2dvb2QgYWlyaW5nXG5mdW5jdGlvbiBjYWxjdWxhdGVNYXhRKCkge1xuICBtYXhRID0gZl9RKFwidmVyeV9nb29kXCIpICogcGVvcGxlXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWF4UVwiKS52YWx1ZSA9IG1heFFcbn1cblxuZnVuY3Rpb24gdXBkYXRlR3JhcGgoKSB7XG4gIGNvbnNvbGUubG9nKFwiVGhlIGdyYXBoIG11c3QgYmUgdXBkYXRlZCFcIik7XG4gIGNvbnNvbGUubG9nKGBWb2x1bWU6ICR7dm9sdW1lfSwgYWN0aXZpdHk6ICR7YWN0aXZpdHl9LCBhaXJpbmc6ICR7YWlyaW5nfWApO1xuXG4gIGlmIChtb2RlID09PSBcInNpbXBsZVwiKSB7XG4gICAgZGF0YSA9IGRhdGFGU2ltcGxlKHZvbHVtZSwgYWN0aXZpdHksIHVzZWRRLCBwZW9wbGUpXG5cbiAgICBkcmF3U2ltcGxlUGxvdChkYXRhKVxuICB9IGVsc2UgaWYgKG1vZGUgPT09IFwiZXhwZXJ0XCIpIHtcbiAgICBkYXRhID0gZGF0YUYodm9sdW1lLCBhY3Rpdml0eSwgbWF4USk7XG5cbiAgICAvLyBpZiAodmlzdHlwZSA9PT0gXCJzdXJmYWNlXCIpIHtcbiAgICAvLyAgIGRyYXdTdXJmYWNlUGxvdChkYXRhKTtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vICAgZHJhd0NvbnRvdXJQbG90KGRhdGEpO1xuICAgIC8vIH1cblxuICAgIGRyYXdDb250b3VyUGxvdChkYXRhKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkcmF3U2ltcGxlUGxvdChkYXRhKSB7XG4gIGRhdGFbMF0ubW9kZSA9IFwibGluZXNcIjtcbiAgZGF0YVswXS5uYW1lID0gXCJQSVJBIChpbiAlKVwiXG4gIGRhdGFbMF0ueWF4aXMgPSBcInlcIlxuXG4gIGRhdGFbMV0udHlwZSA9IFwiYmFyXCI7XG4gIGRhdGFbMV0ueWF4aXMgPSBcInkyXCI7XG4gIGRhdGFbMV0ubmFtZSA9IFwiUG90ZW50aWVsbCBBbmdlc3RlY2t0ZVwiXG5cbiAgY29uc29sZS5sb2coZGF0YSlcblxuICB2YXIgbGF5b3V0ID0ge1xuICAgIHNoYXJlWDogdHJ1ZSxcbiAgICB4YXhpczoge1xuICAgICAgICB0aXRsZToge1xuICAgICAgICAgIHRleHQ6IFwiWmVpdCBpbiBTdHVuZGVuXCIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIHlheGlzOiB7XG4gICAgICB0aXRsZTogJ1BJUkEgKGluICUpJyxcbiAgICAgIG92ZXJsYXlpbmc6ICd5MicsXG4gICAgICB0aWNrdmFsczogWzEwLCAyMCwgMzAsIDQwLCA1MCwgNjAsIDcwLCA4MCwgOTAsIDEwMF0sXG4gICAgICByYW5nZTogWzAsIDEwMF1cbiAgICB9LFxuICAgIHlheGlzMjoge1xuICAgICAgdGlja21vZGU6IFwiYXV0b1wiLFxuICAgICAgdGl0bGU6ICdBbnphaGwgc2ljaCBwb3RlbnRpZWxsIGFuZ2VzdGVja3RlciBQZXJzb25lbiAoZ2VydW5kZXQpJyxcbiAgICAgIHNpZGU6ICdyaWdodCcsXG4gICAgICByYW5nZTogWzAsIHBlb3BsZV1cbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgICB5OiAxLFxuICAgICAgICB4OiAwLFxuICAgICAgfVxuICB9O1xuXG4gIFBsb3RseS5uZXdQbG90KGNoYXJ0RGl2LCBkYXRhLCBsYXlvdXQsIHsgcmVzcG9uc2l2ZTogdHJ1ZSB9KTtcbn1cblxuZnVuY3Rpb24gZHJhd1N1cmZhY2VQbG90KGRhdGEpIHtcbiAgZGF0YS50eXBlID0gXCJzdXJmYWNlXCI7XG4gIGRhdGEuY29udG91cnMgPSB7XG4gICAgejoge1xuICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgIHVzZWNvbG9ybWFwOiB0cnVlLFxuICAgICAgaGlnaGxpZ2h0Y29sb3I6IFwiIzQyZjQ2MlwiLFxuICAgICAgcHJvamVjdDogeyB6OiB0cnVlIH0sXG4gICAgfSxcbiAgfTtcbiAgY29uc3QgbGF5b3V0ID0ge1xuICAgIHhheGlzOiB7XG4gICAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiBcIlplaXQgaW4gU3R1bmRlblwiLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHlheGlzOiB7XG4gICAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiBcIlZvbHVtZW5zdHJvbSBpbiBtXjMvaFwiLFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnNvbGUubG9nKGRhdGEpO1xuICBQbG90bHkubmV3UGxvdChjaGFydERpdiwgW2RhdGFdLCBsYXlvdXQsIHsgcmVzcG9uc2l2ZTogdHJ1ZSB9KTtcbn1cblxuZnVuY3Rpb24gZHJhd0NvbnRvdXJQbG90KGRhdGEpIHtcbiAgZGF0YS50eXBlID0gXCJjb250b3VyXCI7XG5cbiAgZGF0YS5jb2xvcmJhciA9IHtcbiAgICB0aXRsZTogXCJQSVJBXCIsXG4gICAgdGlja3N1ZmZpeDogXCIlXCIsXG4gIH07XG5cbiAgZGF0YS5ob3ZlcnRlbXBsYXRlID0gXCJQSVJBOiAle3o6LjJmfSU8ZXh0cmE+PC9leHRyYT5cIjtcblxuICBjb25zdCBsYXlvdXQgPSB7XG4gICAgc2hvd2F4ZXNsYWJlbHM6IHRydWUsXG4gICAgeGF4aXNfdGl0bGU6IFwiWmVpdCBpbiBTdHVuZGVuXCIsXG4gICAgeGF4aXM6IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6IFwiWmVpdCBpbiBTdHVuZGVuXCIsXG4gICAgICB9LFxuICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6IFwiVm9sdW1lbnN0cm9tIGluIG3Csy9oXCIsXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgY29uc29sZS5sb2coZGF0YSk7XG4gIFBsb3RseS5uZXdQbG90KGNoYXJ0RGl2LCBbZGF0YV0sIGxheW91dCwgeyByZXNwb25zaXZlOiB0cnVlIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbW9kZVVwZGF0ZWQ6IG1vZGVVcGRhdGVkLFxuICB2b2x1bWVVcGRhdGVkOiB2b2x1bWVVcGRhdGVkLFxuICBhY3Rpdml0eVVwZGF0ZWQ6IGFjdGl2aXR5VXBkYXRlZCxcbiAgYWlyaW5nVXBkYXRlZDogYWlyaW5nVXBkYXRlZCxcbiAgdmlzdHlwZVVwZGF0ZWQ6IHZpc3R5cGVVcGRhdGVkLFxuICBwZW9wbGVVcGRhdGVkOiBwZW9wbGVVcGRhdGVkLFxuICB1c2VkUVVwZGF0ZWQ6IHVzZWRRVXBkYXRlZCxcbiAgbWF4UVVwZGF0ZWQ6IG1heFFVcGRhdGVkXG59O1xuIiwiY29uc3Qgdm9sdW1lID0gcmVxdWlyZShcIi4vdm9sdW1lLmpzXCIpO1xuY29uc3QgZ3JhcGggPSByZXF1aXJlKFwiLi9ncmFwaC5qc1wiKTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgLy8gaWYgZXhwZXJ0LCBoaWRlIHNpbXBsZSBodG1sIGVsZW1lbnRzXG4gIGlmIChldmVudC50YXJnZXQudmFsdWUgPT0gXCJleHBlcnRcIikge1xuICAgIHNpbXBlbEVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNpbXBsZVwiKVxuICAgIGZvciAoZWwgb2Ygc2ltcGVsRWxlbWVudHMpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4gICAgfVxuICAgIGV4cGVydEVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImV4cGVydFwiKVxuICAgIGZvciAoZWwgb2YgZXhwZXJ0RWxlbWVudHMpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxuICAgIH1cbiAgfSBlbHNlIGlmIChldmVudC50YXJnZXQudmFsdWUgPT0gXCJzaW1wbGVcIikge1xuICAgIGV4cGVydEVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNpbXBsZVwiKVxuICAgIGZvciAoZWwgb2YgZXhwZXJ0RWxlbWVudHMpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxuICAgIH1cbiAgICBleHBlcnRFbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJleHBlcnRcIilcbiAgICBmb3IgKGVsIG9mIGV4cGVydEVsZW1lbnRzKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxuICAgIH1cbiAgfVxuICBncmFwaC5tb2RlVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpXG59KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhY3Rpdml0eVwiKS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGdyYXBoLmFjdGl2aXR5VXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpO1xufSk7XG5cbi8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlzdHlwZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4vLyAgIGdyYXBoLnZpc3R5cGVVcGRhdGVkKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4vLyB9KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwZW9wbGVcIikuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQudmFsdWUgIT0gXCJcIikge1xuICAgICAgICBhbW91bnQgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIGlmICgxID4gYW1vdW50IHx8IGFtb3VudCA+IDEwMCkge1xuICAgICAgICAgICAgYW1vdW50ID0gM1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gYW1vdW50XG4gICAgICAgIH1cbiAgICAgICAgZ3JhcGgucGVvcGxlVXBkYXRlZChhbW91bnQpO1xuICAgIH1cbn0pO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFpcmluZ1wiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZ3JhcGguYWlyaW5nVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpXG59KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VkUVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldC52YWx1ZSA8IDEpIHtcbiAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gMVxuICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID4gNjAwMCkge1xuICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSA2MDAwXG4gICAgfVxuICAgIGdyYXBoLnVzZWRRVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpXG59KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYXhRXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlIDwgMTAwKSB7XG4gICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IDEwMFxuICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID4gNjAwMCkge1xuICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSA2MDAwXG4gICAgfVxuICAgIGdyYXBoLm1heFFVcGRhdGVkKGV2ZW50LnRhcmdldC52YWx1ZSlcbn0pOyIsImNvbnN0IGdyYXBoID0gcmVxdWlyZShcIi4vZ3JhcGguanNcIik7XG5cbmZ1bmN0aW9uIElucHV0RWxlbWVudChlbGVtZW50LCBkYXRhKSB7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIGVsZW1lbnQudmFsdWUgPSBkYXRhO1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgdGhpcywgZmFsc2UpO1xufVxuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoZSBpbnB1dCBlbGVtZW50IGlzIHVwZGF0ZWQsIGUuZy4sIGJ5IHVzaW5nIGFycm93cyB3aGVuIHR5cGU9bnVtYmVyIG9yIGJ5IHByZXNzaW5nIGVudGVyXG4gKi9cbklucHV0RWxlbWVudC5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgY2FzZSBcImNoYW5nZVwiOlxuICAgICAgdGhpcy5jaGFuZ2UodGhpcy5lbGVtZW50LnZhbHVlKTtcbiAgICAgIHVwZGF0ZVZvbHVtZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZSB0aGUgZWxlbWVudDsgdGhpcyBtZXRob2QgdXBkYXRlcyB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIGFuZCB0aGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb25cbiAqL1xuSW5wdXRFbGVtZW50LnByb3RvdHlwZS5jaGFuZ2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdGhpcy5kYXRhID0gdmFsdWU7XG4gIHRoaXMuZWxlbWVudC52YWx1ZSA9IHZhbHVlO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlVm9sdW1lKCkge1xuICBpZiAobGVuZ3RoRWxlbWVudC5kYXRhID4gMTApIHtcbiAgICBsZW5ndGhFbGVtZW50LmNoYW5nZSgxMClcbiAgfVxuICBpZiAobGVuZ3RoRWxlbWVudC5kYXRhIDwgMSkge1xuICAgIGxlbmd0aEVsZW1lbnQuY2hhbmdlKDEpXG4gIH1cblxuICBpZiAod2lkdGhFbGVtZW50LmRhdGEgPiAxMCkge1xuICAgIGxlbmd0aEVsZW1lbnQuY2hhbmdlKDEwKVxuICB9XG4gIGlmICh3aWR0aEVsZW1lbnQuZGF0YSA8IDEpIHtcbiAgICBsZW5ndGhFbGVtZW50LmNoYW5nZSgxKVxuICB9XG5cbiAgaWYgKGhlaWdodEVsZW1lbnQuZGF0YSA+IDUpIHtcbiAgICBsZW5ndGhFbGVtZW50LmNoYW5nZSg1KVxuICB9XG4gIGlmIChoZWlnaHRFbGVtZW50LmRhdGEgPCAxKSB7XG4gICAgbGVuZ3RoRWxlbWVudC5jaGFuZ2UoMSlcbiAgfVxuXG4gIGNvbnN0IHZvbHVtZSA9IGxlbmd0aEVsZW1lbnQuZGF0YSAqIHdpZHRoRWxlbWVudC5kYXRhICogaGVpZ2h0RWxlbWVudC5kYXRhO1xuICBjb25zb2xlLmxvZyh2b2x1bWUpO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZvbHVtZVwiKS52YWx1ZSA9IHZvbHVtZTtcbiAgZ3JhcGgudm9sdW1lVXBkYXRlZCh2b2x1bWUpO1xuICByZXR1cm4gdm9sdW1lO1xufVxuXG4vLyBpdCBpcyBwb3NzaWJsZSB0byB1cGRhdGUgdGhlc2UgZWxlbWVudHMsIGUuZy4sIHdpdGggbGVuZ3RoRWxlbWVudC5jaGFuZ2UoMTApXG52YXIgbGVuZ3RoRWxlbWVudCA9IG5ldyBJbnB1dEVsZW1lbnQoXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVuZ3RoXCIpLFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlbmd0aFwiKS52YWx1ZVxuKTtcbnZhciB3aWR0aEVsZW1lbnQgPSBuZXcgSW5wdXRFbGVtZW50KFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndpZHRoXCIpLFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndpZHRoXCIpLnZhbHVlXG4pO1xudmFyIGhlaWdodEVsZW1lbnQgPSBuZXcgSW5wdXRFbGVtZW50KFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhlaWdodFwiKSxcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWlnaHRcIikudmFsdWVcbik7XG51cGRhdGVWb2x1bWUoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldDogdXBkYXRlVm9sdW1lLFxuICBpbml0OiB1cGRhdGVWb2x1bWUsXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==