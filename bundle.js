!function(e){var t={};function n(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(a,o,function(t){return e[t]}.bind(null,o));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){const a=n(1).prepareData,o=n(1).prepareDataSimple;var l=document.getElementById("volume").value,i=document.getElementById("activity").value,r=document.getElementById("mode").value,u=document.getElementById("air").value,d=document.getElementById("people").value;const s=document.getElementById("chart");function c(){console.log("The graph must be updated!"),console.log(`Volume: ${l}, activity: ${i}, air: ${u}`),"simple"===r?(data=o(l,i,u,d),function(e){e[0].mode="lines",e[0].name="PIRA (in %)",e[0].yaxis="y",e[1].type="bar",e[1].yaxis="y2",e[1].name="Potentiell Angesteckte",console.log(e);var t={shareX:!0,xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:"PIRA (in %)",overlaying:"y2",tickvals:[10,20,30,40,50,60,70,80,90,100],range:[0,100]},yaxis2:{tickmode:"linear",title:"Anzahl sich potentiell angesteckter Personen (gerundet)",side:"right",dticks:10,range:[0,d]},legend:{y:1,x:0}};Plotly.newPlot(s,e,t,{responsive:!0})}(data)):"expert"===r&&(data=a(l,i,u,d),function(e){e.type="contour",e.colorbar={title:"PIRA",ticksuffix:"%"},e.hovertemplate="PIRA: %{z:.2f}%<extra></extra>";console.log(e),Plotly.newPlot(s,[e],{showaxeslabels:!0,xaxis_title:"Zeit in Stunden",xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:{text:"Volumenstrom in mÂ³/h"}}},{responsive:!0})}(data))}e.exports={modeUpdated:function(e){r=e,c()},volumeUpdated:function(e){l=e,c()},activityUpdated:function(e){i=e,c()},airUpdated:function(e){u=e,c()},vistypeUpdated:function(e){vistype=e,c()},peopleUpdated:function(e){d=e,c()}}},function(e,t){const n={low_activity_lying:.45,low_activity:.54,singing:.65,mid_activity:.9,sports:1.2,test_1:.54,test_2:.65};function a(e){return"singing"==e?3500:"test_2"==e?2500:100}function o(e){const t=2.7618*(Math.exp(1.1761*3.35)-1),o=a("low_activity");return t*(a(e)/o)*(n[e]/n.low_activity)}function l(e,t,n,a){let o=390625*t+225625;return o*=Math.exp(t*a),o-=225625,o*=Math.exp(-t*a-.5776*a),o=390625*t-o,o*=e,o/(n*(225625*t+130321))}function i(e,t,a,i){0==t&&(t+=.01),console.log(`Calculating pira for: t=${e}, Q=${t}, activity=${a}, V=${i}`);const r=function(e,t){return e/t}(i,t),u=o(a),d=function(e,t){return e*Math.exp(-.5776*t)}(u,r),s=function(e,t){return t/e}(i,t);if(e>r){const o=l(u,s,t,r),i=function(e,t,n,a,o){return e*Math.exp(-t*(o+n))*(t*(o-n)*Math.exp(t*(o+n))-Math.exp(t*o)+Math.exp(t*n))/(a*t)}(d,s,r,t,e);return 1-Math.exp(-(o+i)*n[a])}{const o=l(u,s,t,e);return 1-Math.exp(-o*n[a])}}e.exports={prepareData:function(e,t,n,a){const o=e;let l=[],r=[],u=[],d=3e3;300*a>d&&(d=300*a);for(let e=50;e<=d;e+=50){l=[];let n=[];for(let a=0;a<=6;a+=.1)p=i(a,e,t,o),p=Math.round(1e4*p)/100,(isNaN(p)||p>=100)&&(p=0),n.push(p),l.push(a);r.push(e),u.push(n)}return{test:l,x:l,y:r,z:u}},prepareDataSimple:function(e,t,n,a){const o=e,l=function(e){return"very_bad"==e?10:"bad"==e?20:"ok"==e?30:"good"==e?40:"very_good"==e?60:void 0}(n)*a;console.log("Total airflow for all people in the room is (Q) is "+l);let r=[],u=[],d=[],s=[];for(let e=0;e<=6;e+=1){p=i(e,l,t,o),p=Math.round(1e4*p)/100,u.push(p),r.push(e),d.push(e),s.push(Math.round(p*a/100));for(let n=.1;n<1;n+=.1)p=i(e+n,l,t,o),p=Math.round(1e4*p)/100,u.push(p),r.push(e+n)}return[{x:r,y:u},{x:d,y:s}]},pira:i,f_qa:o}},function(e,t,n){n(3);const a=n(0);document.getElementById("mode").addEventListener("input",(function(e){if("expert"==e.target.value){for(el of(simpelElements=document.getElementsByClassName("simple"),simpelElements))el.style.display="none";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="block"}else if("simple"==e.target.value){for(el of(expertElements=document.getElementsByClassName("simple"),expertElements))el.style.display="block";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="none"}a.modeUpdated(e.target.value)})),document.getElementById("activity").addEventListener("input",(function(e){a.activityUpdated(e.target.value)})),document.getElementById("people").addEventListener("input",(function(e){""!=e.target.value&&(amount=e.target.value,(1>amount||amount>100)&&(amount=3,e.target.value=amount),a.peopleUpdated(amount))})),document.getElementById("air").addEventListener("change",(function(e){a.airUpdated(e.target.value)}))},function(e,t,n){const a=n(0);function o(e,t){this.data=t,this.element=e,e.value=t,e.addEventListener("change",this,!1)}function l(){i.data>10&&i.change(10),i.data<1&&i.change(1),r.data>10&&i.change(10),r.data<1&&i.change(1),u.data>5&&i.change(5),u.data<1&&i.change(1);const e=i.data*r.data*u.data;return console.log(e),document.getElementById("volume").value=e,a.volumeUpdated(e),e}o.prototype.handleEvent=function(e){switch(e.type){case"change":this.change(this.element.value),l()}},o.prototype.change=function(e){this.data=e,this.element.value=e};var i=new o(document.getElementById("length"),document.getElementById("length").value),r=new o(document.getElementById("width"),document.getElementById("width").value),u=new o(document.getElementById("height"),document.getElementById("height").value);l(),e.exports={get:l,init:l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,