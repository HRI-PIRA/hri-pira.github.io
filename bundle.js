!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){const o=n(1).prepareData,a=n(1).prepareDataSimple;var l=document.getElementById("volume").value,i=document.getElementById("activity").value,r=document.getElementById("mode").value,u=document.getElementById("air").value,d=document.getElementById("people").value;const c=document.getElementById("chart");function s(){console.log("The graph must be updated!"),console.log(`Volume: ${l}, activity: ${i}, air: ${u}`),"simple"===r?(data=a(l,i,u,d),function(e){e[0].mode="lines",e[0].name="PIRA (in %)",e[0].yaxis="y",e[1].type="bar",e[1].yaxis="y2",e[1].name="Potentiell Infizierte",console.log(e);var t={shareX:!0,yaxis:{title:"PIRA (in %)",overlaying:"y2",tickvals:[10,20,30,40,50,60,70,80,90,100],range:[0,100]},yaxis2:{tickmode:"linear",title:"Anzahl sich potentiell angesteckter Personen (gerundet)",side:"right",dtick:1,range:[0,d]}};Plotly.newPlot(c,e,t,{responsive:!0})}(data)):"expert"===r&&(data=o(l,i,u,d),function(e){e.type="contour",e.colorbar={title:"PIRA",ticksuffix:"%"},e.hovertemplate="PIRA: %{z:.2f}%<extra></extra>";console.log(e),Plotly.newPlot(c,[e],{showaxeslabels:!0,xaxis_title:"Zeit in Stunden",xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:{text:"Volumenstrom in mÂ³/h"}}},{responsive:!0})}(data))}e.exports={modeUpdated:function(e){r=e,s()},volumeUpdated:function(e){l=e,s()},activityUpdated:function(e){i=e,s()},airUpdated:function(e){u=e,s()},vistypeUpdated:function(e){vistype=e,s()},peopleUpdated:function(e){d=e,s()}}},function(e,t){const n={low_activity_lying:.45,low_activity:.54,singing:.65,mid_activity:.9,sports:1.2,test_1:.54,test_2:.65};function o(e){return"singing"==e?3500:"test_2"==e?2500:100}function a(e){const t=2.7618*(Math.exp(1.1761*3.35)-1),a=o("low_activity");return t*(o(e)/a)*(n[e]/n.low_activity)}function l(e,t,n,o){let a=390625*t+225625;return a*=Math.exp(t*o),a-=225625,a*=Math.exp(-t*o-.5776*o),a=390625*t-a,a*=e,a/(n*(225625*t+130321))}function i(e,t,o,i){0==t&&(t+=.01),console.log(`Calculating pira for: t=${e}, Q=${t}, activity=${o}, V=${i}`);const r=function(e,t){return e/t}(i,t),u=a(o),d=function(e,t){return e*Math.exp(-.5776*t)}(u,r),c=function(e,t){return t/e}(i,t);if(e>r){const a=l(u,c,t,r),i=function(e,t,n,o,a){return e*Math.exp(-t*(a+n))*(t*(a-n)*Math.exp(t*(a+n))-Math.exp(t*a)+Math.exp(t*n))/(o*t)}(d,c,r,t,e);return 1-Math.exp(-(a+i)*n[o])}{const a=l(u,c,t,e);return 1-Math.exp(-a*n[o])}}e.exports={prepareData:function(e,t,n,o){const a=e;let l=[],r=[],u=[],d=3e3;300*o>d&&(d=300*o);for(let e=50;e<=d;e+=50){l=[];let n=[];for(let o=0;o<=6;o+=.1)p=i(o,e,t,a),p=Math.round(1e4*p)/100,n.push(p),l.push(o);r.push(e),u.push(n)}return{test:l,x:l,y:r,z:u}},prepareDataSimple:function(e,t,n,o){const a=e,l=function(e){return"very_bad"==e?10:"bad"==e?20:"ok"==e?30:"good"==e?40:"very_good"==e?60:void 0}(n)*o;console.log("Total airflow for all people in the room is (Q) is "+l);let r=[],u=[],d=[],c=[];for(let e=0;e<=6;e+=1){p=i(e,l,t,a),p=Math.round(1e4*p)/100,u.push(p),r.push(e),d.push(e),c.push(Math.round(p*o/100));for(let n=.1;n<1;n+=.1)p=i(e+n,l,t,a),p=Math.round(1e4*p)/100,u.push(p),r.push(e+n)}return[{x:r,y:u},{x:d,y:c}]},pira:i,f_qa:a}},function(e,t,n){n(3);const o=n(0);document.getElementById("mode").addEventListener("input",(function(e){if("expert"==e.target.value){for(el of(simpelElements=document.getElementsByClassName("simple"),simpelElements))el.style.display="none";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="block"}else if("simple"==e.target.value){for(el of(expertElements=document.getElementsByClassName("simple"),expertElements))el.style.display="block";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="none"}o.modeUpdated(e.target.value)})),document.getElementById("activity").addEventListener("input",(function(e){o.activityUpdated(e.target.value)})),document.getElementById("people").addEventListener("input",(function(e){""!=e.target.value&&(amount=e.target.value,(1>amount||amount>100)&&(amount=3,e.target.value=amount),o.peopleUpdated(amount))})),document.getElementById("air").addEventListener("change",(function(e){o.airUpdated(e.target.value)}))},function(e,t,n){const o=n(0);function a(e,t){this.data=t,this.element=e,e.value=t,e.addEventListener("change",this,!1)}function l(){i.data>10&&i.change(10),i.data<1&&i.change(1),r.data>10&&i.change(10),r.data<1&&i.change(1),u.data>5&&i.change(5),u.data<1&&i.change(1);const e=i.data*r.data*u.data;return console.log(e),document.getElementById("volume").value=e,o.volumeUpdated(e),e}a.prototype.handleEvent=function(e){switch(e.type){case"change":this.change(this.element.value),l()}},a.prototype.change=function(e){this.data=e,this.element.value=e};var i=new a(document.getElementById("length"),document.getElementById("length").value),r=new a(document.getElementById("width"),document.getElementById("width").value),u=new a(document.getElementById("height"),document.getElementById("height").value);l(),e.exports={get:l,init:l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,