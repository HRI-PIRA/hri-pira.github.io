!function(e){var t={};function n(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(a,o,function(t){return e[t]}.bind(null,o));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){const n={low_activity_lying:.45,low_activity:.54,singing:.65,mid_activity:.9,sports:1.2,test_1:.54,test_2:.65};function a(e){return"singing"==e?3500:"test_2"==e?2500:100}function o(e){const t=2.7618*(Math.exp(1.1761*3.35)-1),o=a("low_activity");return t*(a(e)/o)*(n[e]/n.low_activity)}function l(e,t,n,a){let o=390625*t+225625;return o*=Math.exp(t*a),o-=225625,o*=Math.exp(-t*a-.5776*a),o=390625*t-o,o*=e,o/(n*(225625*t+130321))}function i(e,t,a,i){0==t&&(t+=.01),console.log(`Calculating pira for: t=${e}, Q=${t}, activity=${a}, V=${i}`);const u=function(e,t){return e/t}(i,t),r=o(a),d=function(e,t){return e*Math.exp(-.5776*t)}(r,u),s=function(e,t){return t/e}(i,t);if(e>u){const o=l(r,s,t,u);let i=function(e,t,n,a,o){return e*(t*o+Math.exp(-t*o)-1/Math.E-1)/(a*t)}(d,s,0,t,e);return 1-Math.exp(-(o+i)*n[a])}{const o=l(r,s,t,e);return 1-Math.exp(-o*n[a])}}e.exports={prepareData:function(e,t,n,a){const o=e;let l=[],u=[],r=[],d=3e3;150*a>d&&(d=150*a);for(let e=50;e<=d;e+=50){l=[];let n=[];for(let a=0;a<=6;a+=.1)p=i(a,e,t,o),p=Math.round(1e4*p)/100,n.push(p),l.push(a);u.push(e),r.push(n)}return{test:l,x:l,y:u,z:r,hasNaN:!1}},prepareDataSimple:function(e,t,n,a){const o=e;console.log("Total airflow for all people in the room is (Q) is "+n);let l=[],u=[],r=[],d=[];for(let e=0;e<=6;e+=1){p=i(e,n,t,o),p=Math.round(1e4*p)/100,u.push(p),l.push(e),r.push(e),d.push(Math.round(p*a/100));for(let a=.1;a<1;a+=.1)p=i(e+a,n,t,o),p=Math.round(1e4*p)/100,u.push(p),l.push(e+a)}return[{x:l,y:u},{x:r,y:d}]},pira:i,f_qa:o,f_Q:function(e){return"very_bad"==e?10:"bad"==e?20:"ok"==e?30:"good"==e?40:"very_good"==e?60:void 0}}},function(e,t,n){const a=n(0).prepareData,o=n(0).prepareDataSimple,l=n(0).f_Q;var i=document.getElementById("volume").value,u=document.getElementById("activity").value,r=document.getElementById("mode").value,d=document.getElementById("airing").value,s=document.getElementById("people").value,c=-1;m();const p=document.getElementById("chart");function m(){c=l(d)*s,document.getElementById("usedQ").value=c}function g(){console.log("The graph must be updated!"),console.log(`Volume: ${i}, activity: ${u}, airing: ${d}`),"simple"===r?(data=o(i,u,c,s),function(e){e[0].mode="lines",e[0].name="PIRA (in %)",e[0].yaxis="y",e[1].type="bar",e[1].yaxis="y2",e[1].name="Potentiell Angesteckte",console.log(e);var t={shareX:!0,xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:"PIRA (in %)",overlaying:"y2",tickvals:[10,20,30,40,50,60,70,80,90,100],range:[0,100]},yaxis2:{tickmode:"auto",title:"Anzahl sich potentiell angesteckter Personen (gerundet)",side:"right",range:[0,s]},legend:{y:1,x:0}};Plotly.newPlot(p,e,t,{responsive:!0})}(data)):"expert"===r&&(data=a(i,u,d,s),function(e){e.type="contour",e.colorbar={title:"PIRA",ticksuffix:"%"},e.hovertemplate="PIRA: %{z:.2f}%<extra></extra>";console.log(e),Plotly.newPlot(p,[e],{showaxeslabels:!0,xaxis_title:"Zeit in Stunden",xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:{text:"Volumenstrom in mÂ³/h"}}},{responsive:!0})}(data))}e.exports={modeUpdated:function(e){r=e,g()},volumeUpdated:function(e){i=e,g()},activityUpdated:function(e){u=e,g()},airingUpdated:function(e){d=e,m(),g()},vistypeUpdated:function(e){vistype=e,g()},peopleUpdated:function(e){s=e,m(),g()},usedQUpdated:function(e){c=e,g()}}},function(e,t,n){n(3);const a=n(1);document.getElementById("mode").addEventListener("input",(function(e){if("expert"==e.target.value){for(el of(simpelElements=document.getElementsByClassName("simple"),simpelElements))el.style.display="none";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="block"}else if("simple"==e.target.value){for(el of(expertElements=document.getElementsByClassName("simple"),expertElements))el.style.display="block";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="none"}a.modeUpdated(e.target.value)})),document.getElementById("activity").addEventListener("input",(function(e){a.activityUpdated(e.target.value)})),document.getElementById("people").addEventListener("input",(function(e){""!=e.target.value&&(amount=e.target.value,(1>amount||amount>100)&&(amount=3,e.target.value=amount),a.peopleUpdated(amount))})),document.getElementById("airing").addEventListener("change",(function(e){a.airingUpdated(e.target.value)})),document.getElementById("usedQ").addEventListener("change",(function(e){e.target.value<1?e.target.value=1:e.target.value>3e3&&(e.target.value=3e3),a.usedQUpdated(e.target.value)}))},function(e,t,n){const a=n(1);function o(e,t){this.data=t,this.element=e,e.value=t,e.addEventListener("change",this,!1)}function l(){i.data>10&&i.change(10),i.data<1&&i.change(1),u.data>10&&i.change(10),u.data<1&&i.change(1),r.data>5&&i.change(5),r.data<1&&i.change(1);const e=i.data*u.data*r.data;return console.log(e),document.getElementById("volume").value=e,a.volumeUpdated(e),e}o.prototype.handleEvent=function(e){switch(e.type){case"change":this.change(this.element.value),l()}},o.prototype.change=function(e){this.data=e,this.element.value=e};var i=new o(document.getElementById("length"),document.getElementById("length").value),u=new o(document.getElementById("width"),document.getElementById("width").value),r=new o(document.getElementById("height"),document.getElementById("height").value);l(),e.exports={get:l,init:l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dyYXBoLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdm9sdW1lLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUWIiLCJsb3dfYWN0aXZpdHlfbHlpbmciLCJsb3dfYWN0aXZpdHkiLCJzaW5naW5nIiwibWlkX2FjdGl2aXR5Iiwic3BvcnRzIiwidGVzdF8xIiwidGVzdF8yIiwiZl9FIiwiYWN0aXZpdHkiLCJmX3FhIiwicV8wIiwiTWF0aCIsImV4cCIsIkVfMCIsImZfQyIsInFhIiwiQUNIIiwiUSIsInBpcmEiLCJWIiwiY29uc29sZSIsImxvZyIsInRhdSIsImZfdGF1IiwicWF0YXUiLCJmX3FhdGF1IiwiZl9BQ0giLCJDIiwiQ3RhdSIsIkUiLCJmX0N0YXUiLCJwcmVwYXJlRGF0YSIsInZvbHVtZSIsImFpciIsInBlb3BsZSIsInhBIiwieUEiLCJyb3dzIiwibWF4Iiwicm93Iiwicm91bmQiLCJwdXNoIiwidGVzdCIsIngiLCJ5IiwieiIsImhhc05hTiIsInByZXBhcmVEYXRhU2ltcGxlIiwieDIiLCJ5MiIsInN0IiwiZl9RIiwiYWlyaW5nIiwiZGF0YUYiLCJkYXRhRlNpbXBsZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ1c2VkUSIsImNhbGN1bGF0ZVVzZWRRIiwiY2hhcnREaXYiLCJ1cGRhdGVHcmFwaCIsImRhdGEiLCJ5YXhpcyIsInR5cGUiLCJsYXlvdXQiLCJzaGFyZVgiLCJ4YXhpcyIsInRpdGxlIiwidGV4dCIsIm92ZXJsYXlpbmciLCJ0aWNrdmFscyIsInJhbmdlIiwieWF4aXMyIiwidGlja21vZGUiLCJzaWRlIiwibGVnZW5kIiwiUGxvdGx5IiwibmV3UGxvdCIsInJlc3BvbnNpdmUiLCJkcmF3U2ltcGxlUGxvdCIsImNvbG9yYmFyIiwidGlja3N1ZmZpeCIsImhvdmVydGVtcGxhdGUiLCJzaG93YXhlc2xhYmVscyIsInhheGlzX3RpdGxlIiwiZHJhd0NvbnRvdXJQbG90IiwibW9kZVVwZGF0ZWQiLCJuZXdNb2RlIiwidm9sdW1lVXBkYXRlZCIsIm5ld1ZvbHVtZSIsImFjdGl2aXR5VXBkYXRlZCIsIm5ld0FjdGl2aXR5IiwiYWlyaW5nVXBkYXRlZCIsIm5ld0FpcmluZyIsInZpc3R5cGVVcGRhdGVkIiwibmV3VmlzVHlwZSIsInZpc3R5cGUiLCJwZW9wbGVVcGRhdGVkIiwibmV3UGVvcGxlIiwidXNlZFFVcGRhdGVkIiwibmV3VXNlZFEiLCJncmFwaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInRhcmdldCIsImVsIiwic2ltcGVsRWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiZXhwZXJ0RWxlbWVudHMiLCJhbW91bnQiLCJJbnB1dEVsZW1lbnQiLCJlbGVtZW50IiwidGhpcyIsInVwZGF0ZVZvbHVtZSIsImxlbmd0aEVsZW1lbnQiLCJjaGFuZ2UiLCJ3aWR0aEVsZW1lbnQiLCJoZWlnaHRFbGVtZW50IiwiaGFuZGxlRXZlbnQiLCJpbml0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLGdCQ2xGckQsTUFBTUMsRUFBSyxDQUNUQyxtQkFBb0IsSUFDcEJDLGFBQWMsSUFDZEMsUUFBUyxJQUNUQyxhQUFjLEdBQ2RDLE9BQVEsSUFDUkMsT0FBUSxJQUNSQyxPQUFRLEtBT1YsU0FBU0MsRUFBSUMsR0FDWCxNQUFnQixXQUFaQSxFQUNLLEtBQ2EsVUFBWEEsRUFDRixLQUNLLElBaUJoQixTQUFTQyxFQUFLRCxHQUNaLE1BQ01FLEVBQU0sUUFBVUMsS0FBS0MsSUFBSSxPQURuQixNQUNtQyxHQUV6Q0MsRUFBTU4sRUFBSSxnQkFHaEIsT0FBT0csR0FGR0gsRUFBSUMsR0FFSUssSUFBUWQsRUFBR1MsR0FBWVQsRUFBR0UsY0FXOUMsU0FBU2EsRUFBSUMsRUFBSUMsRUFBS0MsRUFBR2hDLEdBR3ZCLElBQUlPLEVBQUksT0FBU3dCLEVBQU0sT0F1QnZCLE9BckJBeEIsR0FBUW1CLEtBQUtDLElBQUlJLEVBQU0vQixHQUV2Qk8sR0FBUSxPQUVSQSxHQUFRbUIsS0FBS0MsS0FBS0ksRUFBTS9CLEVBQUksTUFBY0EsR0FFMUNPLEVBQUksT0FBU3dCLEVBQU14QixFQUVuQkEsR0FBSXVCLEVBYUd2QixHQUhDeUIsR0FBSyxPQUFTRCxFQUFNLFNBa0I5QixTQUFTRSxFQUFLakMsRUFBR2dDLEVBQUdULEVBQVVXLEdBQ25CLEdBQUxGLElBQVFBLEdBQUssS0FDakJHLFFBQVFDLElBQUksMkJBQTJCcEMsUUFBUWdDLGVBQWVULFFBQWVXLEtBQzdFLE1BQU1HLEVBeEZSLFNBQWVILEVBQUdGLEdBQ2hCLE9BQU9FLEVBQUlGLEVBdUZDTSxDQUFNSixFQUFHRixHQUVmRixFQUFLTixFQUFLRCxHQUVWZ0IsRUF4RFIsU0FBaUJULEVBQUlPLEdBQ25CLE9BQU9QLEVBQUtKLEtBQUtDLEtBQUssTUFBU1UsR0F1RGpCRyxDQUFRVixFQUFJTyxHQUVwQk4sRUF0RFIsU0FBZUcsRUFBR0YsR0FDaEIsT0FBT0EsRUFBSUUsRUFxRENPLENBQU1QLEVBQUdGLEdBSXJCLEdBQUloQyxFQUFJcUMsRUFBSyxDQUNYLE1BQU1LLEVBQUliLEVBQUlDLEVBQUlDLEVBQUtDLEVBQUdLLEdBRTFCLElBQUlNLEVBNUJSLFNBQWdCSixFQUFPUixFQUFLTSxFQUFLTCxFQUFHaEMsR0FTbEMsT0FMUXVDLEdBQVNSLEVBQU0vQixFQUFJMEIsS0FBS0MsS0FBS0ksRUFBTS9CLEdBQUssRUFBRTBCLEtBQUtrQixFQUFJLElBR25EWixFQUFJRCxHQXFCQ2MsQ0FBT04sRUFBT1IsRUFBS00sRUFBS0wsRUFBR2hDLEdBS3RDLE9BQU8sRUFBSTBCLEtBQUtDLE1BQU1lLEVBQUlDLEdBQVE3QixFQUFHUyxJQUNoQyxDQUNMLE1BQU1tQixFQUFJYixFQUFJQyxFQUFJQyxFQUFLQyxFQUFHaEMsR0FFMUIsT0FBTyxFQUFJMEIsS0FBS0MsS0FBS2UsRUFBSTVCLEVBQUdTLEtBK0ZoQzFDLEVBQU9ELFFBQVUsQ0FDYmtFLFlBNUZKLFNBQXFCQyxFQUFReEIsRUFBVXlCLEVBQUtDLEdBQzFDLE1BQU1mLEVBQUlhLEVBRVYsSUFBSUcsRUFBSyxHQUNMQyxFQUFLLEdBQ0xDLEVBQU8sR0FLUEMsRUFBTSxJQUVOLElBQU1KLEVBQVNJLElBQ2ZBLEVBQU0sSUFBTUosR0FHaEIsSUFBSyxJQUFJakIsRUFQQyxHQU9RQSxHQUFLcUIsRUFBS3JCLEdBQUssR0FBSSxDQUNuQ2tCLEVBQUssR0FDTCxJQUFJSSxFQUFNLEdBRVYsSUFBSyxJQUFJdEQsRUFBSSxFQUFLQSxHQUFLLEVBQUtBLEdBQUssR0FFL0JZLEVBQUlxQixFQUFLakMsRUFBR2dDLEVBQUdULEVBQVVXLEdBRXpCdEIsRUFBSWMsS0FBSzZCLE1BQVUsSUFBSjNDLEdBQWEsSUFLNUIwQyxFQUFJRSxLQUFLNUMsR0FDVHNDLEVBQUdNLEtBQUt4RCxHQUVWbUQsRUFBR0ssS0FBS3hCLEdBQ1JvQixFQUFLSSxLQUFLRixHQVVaLE1BQU8sQ0FDTEcsS0FBTVAsRUFDTlEsRUFBR1IsRUFDSFMsRUFBR1IsRUFDSFMsRUFBR1IsRUFDSFMsUUF6Q1csSUFzRlhDLGtCQXpDSixTQUEyQmYsRUFBUXhCLEVBQVVTLEVBQUdpQixHQUM5QyxNQUFNZixFQUFJYSxFQUVWWixRQUFRQyxJQUFJLHNEQUFzREosR0FFbEUsSUFBSTBCLEVBQUksR0FDSkMsRUFBSSxHQUNKSSxFQUFLLEdBQ0xDLEVBQUssR0FFVCxJQUFLLElBQUloRSxFQUFJLEVBQUdBLEdBQUssRUFBR0EsR0FBSyxFQUFHLENBQzlCWSxFQUFJcUIsRUFBS2pDLEVBQUdnQyxFQUFHVCxFQUFVVyxHQUN6QnRCLEVBQUljLEtBQUs2QixNQUFVLElBQUozQyxHQUFhLElBQzVCK0MsRUFBRUgsS0FBSzVDLEdBQ1A4QyxFQUFFRixLQUFLeEQsR0FDUCtELEVBQUdQLEtBQUt4RCxHQUNSZ0UsRUFBR1IsS0FBSzlCLEtBQUs2QixNQUFNM0MsRUFBSXFDLEVBQVMsTUFFaEMsSUFBSyxJQUFJZ0IsRUFBSyxHQUFLQSxFQUFLLEVBQUdBLEdBQU0sR0FDN0JyRCxFQUFJcUIsRUFBS2pDLEVBQUlpRSxFQUFJakMsRUFBR1QsRUFBVVcsR0FDOUJ0QixFQUFJYyxLQUFLNkIsTUFBVSxJQUFKM0MsR0FBYSxJQUM1QitDLEVBQUVILEtBQUs1QyxHQUNQOEMsRUFBRUYsS0FBS3hELEVBQUlpRSxHQUlqQixNQUFPLENBQ0wsQ0FDRVAsRUFBR0EsRUFDSEMsRUFBR0EsR0FFTCxDQUNFRCxFQUFHSyxFQUNISixFQUFHSyxLQVNML0IsS0FBTUEsRUFDTlQsS0FBTUEsRUFDTjBDLElBdE1KLFNBQWFDLEdBQ1gsTUFBYyxZQUFWQSxFQUNLLEdBQ1ksT0FBVkEsRUFDRixHQUNZLE1BQVZBLEVBQ0YsR0FDWSxRQUFWQSxFQUNGLEdBQ1ksYUFBVkEsRUFDRixRQURGLEssZ0JDL0JULE1BQU1DLEVBQVEsRUFBUSxHQUFhdEIsWUFDN0J1QixFQUFjLEVBQVEsR0FBYVAsa0JBQ25DSSxFQUFNLEVBQVEsR0FBYUEsSUFHakMsSUFBSW5CLEVBQVN1QixTQUFTQyxlQUFlLFVBQVV4RSxNQUMzQ3dCLEVBQVcrQyxTQUFTQyxlQUFlLFlBQVl4RSxNQUUvQ0UsRUFBT3FFLFNBQVNDLGVBQWUsUUFBUXhFLE1BQ3ZDb0UsRUFBU0csU0FBU0MsZUFBZSxVQUFVeEUsTUFDM0NrRCxFQUFTcUIsU0FBU0MsZUFBZSxVQUFVeEUsTUFDM0N5RSxHQUFTLEVBQ2JDLElBRUEsTUFBTUMsRUFBV0osU0FBU0MsZUFBZSxTQXlDekMsU0FBU0UsSUFDUEQsRUFBUU4sRUFBSUMsR0FBVWxCLEVBQ3RCcUIsU0FBU0MsZUFBZSxTQUFTeEUsTUFBUXlFLEVBRzNDLFNBQVNHLElBQ1B4QyxRQUFRQyxJQUFJLDhCQUNaRCxRQUFRQyxJQUFJLFdBQVdXLGdCQUFxQnhCLGNBQXFCNEMsS0FFcEQsV0FBVGxFLEdBQ0YyRSxLQUFPUCxFQUFZdEIsRUFBUXhCLEVBQVVpRCxFQUFPdkIsR0FnQmhELFNBQXdCMkIsR0FDdEJBLEVBQUssR0FBRzNFLEtBQU8sUUFDZjJFLEVBQUssR0FBR3ZGLEtBQU8sY0FDZnVGLEVBQUssR0FBR0MsTUFBUSxJQUVoQkQsRUFBSyxHQUFHRSxLQUFPLE1BQ2ZGLEVBQUssR0FBR0MsTUFBUSxLQUNoQkQsRUFBSyxHQUFHdkYsS0FBTyx5QkFFZjhDLFFBQVFDLElBQUl3QyxHQUVaLElBQUlHLEVBQVMsQ0FDWEMsUUFBUSxFQUNSQyxNQUFPLENBQ0hDLE1BQU8sQ0FDTEMsS0FBTSxvQkFHWk4sTUFBTyxDQUNMSyxNQUFPLGNBQ1BFLFdBQVksS0FDWkMsU0FBVSxDQUFDLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEtBQy9DQyxNQUFPLENBQUMsRUFBRyxNQUViQyxPQUFRLENBQ05DLFNBQVUsT0FDVk4sTUFBTywwREFDUE8sS0FBTSxRQUNOSCxNQUFPLENBQUMsRUFBR3JDLElBRWJ5QyxPQUFRLENBQ0ovQixFQUFHLEVBQ0hELEVBQUcsSUFJVGlDLE9BQU9DLFFBQVFsQixFQUFVRSxFQUFNRyxFQUFRLENBQUVjLFlBQVksSUFsRG5EQyxDQUFlbEIsT0FDRyxXQUFUM0UsSUFDVDJFLEtBQU9SLEVBQU1yQixFQUFReEIsRUFBVTRDLEVBQVFsQixHQThFM0MsU0FBeUIyQixHQUN2QkEsRUFBS0UsS0FBTyxVQUVaRixFQUFLbUIsU0FBVyxDQUNkYixNQUFPLE9BQ1BjLFdBQVksS0FHZHBCLEVBQUtxQixjQUFnQixpQ0FpQnJCOUQsUUFBUUMsSUFBSXdDLEdBQ1plLE9BQU9DLFFBQVFsQixFQUFVLENBQUNFLEdBaEJYLENBQ2JzQixnQkFBZ0IsRUFDaEJDLFlBQWEsa0JBQ2JsQixNQUFPLENBQ0xDLE1BQU8sQ0FDTEMsS0FBTSxvQkFHVk4sTUFBTyxDQUNMSyxNQUFPLENBQ0xDLEtBQU0sMEJBTTZCLENBQUVVLFlBQVksSUFoR3JETyxDQUFnQnhCLE9BbUdwQi9GLEVBQU9ELFFBQVUsQ0FDZnlILFlBaktGLFNBQXFCQyxHQUNuQnJHLEVBQU9xRyxFQUNQM0IsS0FnS0E0QixjQTdKRixTQUF1QkMsR0FDckJ6RCxFQUFTeUQsRUFDVDdCLEtBNEpBOEIsZ0JBekpGLFNBQXlCQyxHQUN2Qm5GLEVBQVdtRixFQUNYL0IsS0F3SkFnQyxjQXJKRixTQUF1QkMsR0FDckJ6QyxFQUFTeUMsRUFDVG5DLElBQ0FFLEtBbUpBa0MsZUExSUYsU0FBd0JDLEdBQ3RCQyxRQUFVRCxFQUNWbkMsS0F5SUFxQyxjQWpKRixTQUF1QkMsR0FDckJoRSxFQUFTZ0UsRUFDVHhDLElBQ0FFLEtBK0lBdUMsYUF0SUYsU0FBc0JDLEdBQ3BCM0MsRUFBUTJDLEVBQ1J4QyxPLGdCQ25EYSxFQUFRLEdBQXZCLE1BQ015QyxFQUFRLEVBQVEsR0FFdEI5QyxTQUFTQyxlQUFlLFFBQVE4QyxpQkFBaUIsU0FBUyxTQUFVQyxHQUVsRSxHQUEwQixVQUF0QkEsRUFBTUMsT0FBT3hILE1BQW1CLENBRWxDLElBQUt5SCxNQURMQyxlQUFpQm5ELFNBQVNvRCx1QkFBdUIsVUFDdENELGdCQUNQRCxHQUFHRyxNQUFNQyxRQUFVLE9BR3ZCLElBQUtKLE1BRExLLGVBQWlCdkQsU0FBU29ELHVCQUF1QixVQUN0Q0csZ0JBQ1BMLEdBQUdHLE1BQU1DLFFBQVUsYUFFbEIsR0FBMEIsVUFBdEJOLEVBQU1DLE9BQU94SCxNQUFtQixDQUV6QyxJQUFLeUgsTUFETEssZUFBaUJ2RCxTQUFTb0QsdUJBQXVCLFVBQ3RDRyxnQkFDUEwsR0FBR0csTUFBTUMsUUFBVSxRQUd2QixJQUFLSixNQURMSyxlQUFpQnZELFNBQVNvRCx1QkFBdUIsVUFDdENHLGdCQUNQTCxHQUFHRyxNQUFNQyxRQUFVLE9BR3pCUixFQUFNZixZQUFZaUIsRUFBTUMsT0FBT3hILFVBR2pDdUUsU0FBU0MsZUFBZSxZQUFZOEMsaUJBQWlCLFNBQVMsU0FBVUMsR0FDdEVGLEVBQU1YLGdCQUFnQmEsRUFBTUMsT0FBT3hILFVBT3JDdUUsU0FBU0MsZUFBZSxVQUFVOEMsaUJBQWlCLFNBQVMsU0FBVUMsR0FDeEMsSUFBdEJBLEVBQU1DLE9BQU94SCxRQUNiK0gsT0FBU1IsRUFBTUMsT0FBT3hILE9BQ2xCLEVBQUkrSCxRQUFVQSxPQUFTLE9BQ3ZCQSxPQUFTLEVBQ1RSLEVBQU1DLE9BQU94SCxNQUFRK0gsUUFFekJWLEVBQU1KLGNBQWNjLFlBSTVCeEQsU0FBU0MsZUFBZSxVQUFVOEMsaUJBQWlCLFVBQVUsU0FBU0MsR0FDbEVGLEVBQU1ULGNBQWNXLEVBQU1DLE9BQU94SCxVQUdyQ3VFLFNBQVNDLGVBQWUsU0FBUzhDLGlCQUFpQixVQUFVLFNBQVNDLEdBQzdEQSxFQUFNQyxPQUFPeEgsTUFBUSxFQUNyQnVILEVBQU1DLE9BQU94SCxNQUFRLEVBQ2R1SCxFQUFNQyxPQUFPeEgsTUFBUSxNQUM1QnVILEVBQU1DLE9BQU94SCxNQUFRLEtBRXpCcUgsRUFBTUYsYUFBYUksRUFBTUMsT0FBT3hILFcsZ0JDeERwQyxNQUFNcUgsRUFBUSxFQUFRLEdBRXRCLFNBQVNXLEVBQWFDLEVBQVNwRCxHQUM3QnFELEtBQUtyRCxLQUFPQSxFQUNacUQsS0FBS0QsUUFBVUEsRUFDZkEsRUFBUWpJLE1BQVE2RSxFQUNoQm9ELEVBQVFYLGlCQUFpQixTQUFVWSxNQUFNLEdBc0IzQyxTQUFTQyxJQUNIQyxFQUFjdkQsS0FBTyxJQUN2QnVELEVBQWNDLE9BQU8sSUFFbkJELEVBQWN2RCxLQUFPLEdBQ3ZCdUQsRUFBY0MsT0FBTyxHQUduQkMsRUFBYXpELEtBQU8sSUFDdEJ1RCxFQUFjQyxPQUFPLElBRW5CQyxFQUFhekQsS0FBTyxHQUN0QnVELEVBQWNDLE9BQU8sR0FHbkJFLEVBQWMxRCxLQUFPLEdBQ3ZCdUQsRUFBY0MsT0FBTyxHQUVuQkUsRUFBYzFELEtBQU8sR0FDdkJ1RCxFQUFjQyxPQUFPLEdBR3ZCLE1BQU1yRixFQUFTb0YsRUFBY3ZELEtBQU95RCxFQUFhekQsS0FBTzBELEVBQWMxRCxLQUl0RSxPQUhBekMsUUFBUUMsSUFBSVcsR0FDWnVCLFNBQVNDLGVBQWUsVUFBVXhFLE1BQVFnRCxFQUMxQ3FFLEVBQU1iLGNBQWN4RCxHQUNiQSxFQTFDVGdGLEVBQWFySCxVQUFVNkgsWUFBYyxTQUFVakIsR0FDN0MsT0FBUUEsRUFBTXhDLE1BQ1osSUFBSyxTQUNIbUQsS0FBS0csT0FBT0gsS0FBS0QsUUFBUWpJLE9BQ3pCbUksTUFPTkgsRUFBYXJILFVBQVUwSCxPQUFTLFNBQVVySSxHQUN4Q2tJLEtBQUtyRCxLQUFPN0UsRUFDWmtJLEtBQUtELFFBQVFqSSxNQUFRQSxHQWlDdkIsSUFBSW9JLEVBQWdCLElBQUlKLEVBQ3RCekQsU0FBU0MsZUFBZSxVQUN4QkQsU0FBU0MsZUFBZSxVQUFVeEUsT0FFaENzSSxFQUFlLElBQUlOLEVBQ3JCekQsU0FBU0MsZUFBZSxTQUN4QkQsU0FBU0MsZUFBZSxTQUFTeEUsT0FFL0J1SSxFQUFnQixJQUFJUCxFQUN0QnpELFNBQVNDLGVBQWUsVUFDeEJELFNBQVNDLGVBQWUsVUFBVXhFLE9BRXBDbUksSUFFQXJKLEVBQU9ELFFBQVUsQ0FDZmUsSUFBS3VJLEVBQ0xNLEtBQU1OIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsImNvbnN0IFFiID0ge1xuICBsb3dfYWN0aXZpdHlfbHlpbmc6IDAuNDUsXG4gIGxvd19hY3Rpdml0eTogMC41NCxcbiAgc2luZ2luZzogMC42NSxcbiAgbWlkX2FjdGl2aXR5OiAwLjksXG4gIHNwb3J0czogMS4yLFxuICB0ZXN0XzE6IDAuNTQsIC8vIHZhbHVlIHVzZWQgaW4gdGVzdF9kYXRhL1BJUl9Nb2RlbGwuanBnXG4gIHRlc3RfMjogMC42NSwgLy8gdmFsdWUgdXNlZCBpbiB0ZXN0X2RhdGEvUElSX01vZGVsbF9ha3QuanBnIGFzIGluc3RydWN0ZWQgYnkgbWFpbFxufTtcblxuZnVuY3Rpb24gZl90YXUoViwgUSkge1xuICByZXR1cm4gViAvIFE7XG59XG5cbmZ1bmN0aW9uIGZfRShhY3Rpdml0eSkge1xuICBpZiAoYWN0aXZpdHkgPT0gXCJzaW5naW5nXCIpIHtcbiAgICByZXR1cm4gMzUwMDtcbiAgfSBlbHNlIGlmIChhY3Rpdml0eSA9PVwidGVzdF8yXCIpIHtcbiAgICByZXR1cm4gMjUwMDsgLy8gdmFsdWUgcmVjZWl2ZWQgdmlhIG1haWwgZnJvbSBrcmllZ2VsXG4gIH0gZWxzZSByZXR1cm4gMTAwO1xufVxuXG5mdW5jdGlvbiBmX1EoYWlyaW5nKSB7XG4gIGlmIChhaXJpbmcgPT0gXCJ2ZXJ5X2JhZFwiKSB7XG4gICAgcmV0dXJuIDEwO1xuICB9IGVsc2UgaWYgKGFpcmluZyA9PSBcImJhZFwiKSB7XG4gICAgcmV0dXJuIDIwO1xuICB9IGVsc2UgaWYgKGFpcmluZyA9PSBcIm9rXCIpIHtcbiAgICByZXR1cm4gMzA7XG4gIH0gZWxzZSBpZiAoYWlyaW5nID09IFwiZ29vZFwiKSB7XG4gICAgcmV0dXJuIDQwO1xuICB9IGVsc2UgaWYgKGFpcmluZyA9PSBcInZlcnlfZ29vZFwiKSB7XG4gICAgcmV0dXJuIDYwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZfcWEoYWN0aXZpdHkpIHtcbiAgY29uc3QgUl8wID0gMy4zNTtcbiAgY29uc3QgcV8wID0gMi43NjE4ICogKE1hdGguZXhwKDEuMTc2MSAqIFJfMCkgLSAxKTtcblxuICBjb25zdCBFXzAgPSBmX0UoXCJsb3dfYWN0aXZpdHlcIik7XG4gIGNvbnN0IEUgPSBmX0UoYWN0aXZpdHkpO1xuXG4gIHJldHVybiBxXzAgKiAoRSAvIEVfMCkgKiAoUWJbYWN0aXZpdHldIC8gUWIubG93X2FjdGl2aXR5KTtcbn1cblxuZnVuY3Rpb24gZl9xYXRhdShxYSwgdGF1KSB7XG4gIHJldHVybiBxYSAqIE1hdGguZXhwKC0wLjU3NzYgKiB0YXUpO1xufVxuXG5mdW5jdGlvbiBmX0FDSChWLCBRKSB7XG4gIHJldHVybiBRIC8gVjtcbn1cblxuZnVuY3Rpb24gZl9DKHFhLCBBQ0gsIFEsIHQpIHtcbiAgLy8gbnVtZXJhdG9yXG5cbiAgbGV0IG4gPSAzOTA2MjUgKiBBQ0ggKyAyMjU2MjU7XG4gIC8vIGNvbnNvbGUubG9nKG4pO1xuICBuID0gbiAqIE1hdGguZXhwKEFDSCAqIHQpO1xuICAvLyBjb25zb2xlLmxvZyhuKTtcbiAgbiA9IG4gLSAyMjU2MjU7XG4gIC8vIGNvbnNvbGUubG9nKG4pO1xuICBuID0gbiAqIE1hdGguZXhwKC1BQ0ggKiB0IC0gKDM2MSAvIDYyNSkgKiB0KTtcbiAgLy8gY29uc29sZS5sb2cobik7XG4gIG4gPSAzOTA2MjUgKiBBQ0ggLSBuO1xuICAvLyBjb25zb2xlLmxvZyhuKTtcbiAgbiA9IHFhICogbjtcblxuICAvLyBjb25zb2xlLmxvZyhuKTtcbiAgLy8gY29uc29sZS5sb2cocWEpO1xuICAvLyBjb25zb2xlLmxvZyhBQ0gpO1xuICAvLyBjb25zb2xlLmxvZyhRKTtcbiAgLy8gY29uc29sZS5sb2coXCJ0OiBcIiArIHQpO1xuXG4gIC8vIGNvbnNvbGUubG9nKG4pO1xuICAvLyBkZW5vbWluYXRvclxuICBsZXQgZCA9IFEgKiAoMjI1NjI1ICogQUNIICsgMTMwMzIxKTtcbiAgLy8gY29uc29sZS5sb2coZCk7XG5cbiAgcmV0dXJuIG4gLyBkO1xufVxuXG5mdW5jdGlvbiBmX0N0YXUocWF0YXUsIEFDSCwgdGF1LCBRLCB0KSB7XG4gIC8vIG51bWVyYXRvclxuICAvLyBsZXQgbiA9IHFhdGF1ICogTWF0aC5leHAoLUFDSCAqICh0ICsgdGF1KSkgKiAoQUNIICogKHQgLSB0YXUpICogTWF0aC5leHAoQUNIICogKHQgKyB0YXUpKSAtIE1hdGguZXhwKEFDSCAqIHQpICsgTWF0aC5leHAoQUNIICogdGF1KSk7XG4gIC8vIGxldCBuID0gcWF0YXUgKiBNYXRoLmV4cCgtQUNIICogdCAtIDEpICogKChBQ0ggKiB0IC0gMSkgKiBNYXRoLmV4cChBQ0ggKiB0ICsgMSkgLSBNYXRoLmV4cChBQ0ggKiB0KSArIE1hdGguZXhwKDEpKTtcbiAgbGV0IG4gPSBxYXRhdSAqIChBQ0ggKiB0ICsgTWF0aC5leHAoLUFDSCAqIHQpIC0gMS9NYXRoLkUgLSAxKVxuXG4gIC8vIGRlbm9taW5hdG9yXG4gIGxldCBkID0gUSAqIEFDSDtcblxuICByZXR1cm4gbiAvIGQ7XG59XG5cbmZ1bmN0aW9uIHBpcmEodCwgUSwgYWN0aXZpdHksIFYpIHtcbiAgaWYgKFEgPT0gMCkgUSArPSAwLjAxO1xuICBjb25zb2xlLmxvZyhgQ2FsY3VsYXRpbmcgcGlyYSBmb3I6IHQ9JHt0fSwgUT0ke1F9LCBhY3Rpdml0eT0ke2FjdGl2aXR5fSwgVj0ke1Z9YCk7XG4gIGNvbnN0IHRhdSA9IGZfdGF1KFYsIFEpO1xuICAvLyBjb25zb2xlLmxvZyhcInRhdTogXCIgKyB0YXUpO1xuICBjb25zdCBxYSA9IGZfcWEoYWN0aXZpdHkpO1xuICAvLyBjb25zb2xlLmxvZyhcInFhOiBcIiArIHFhKTtcbiAgY29uc3QgcWF0YXUgPSBmX3FhdGF1KHFhLCB0YXUpO1xuICAvLyBjb25zb2xlLmxvZyhcInFhdGF1OiBcIiArIHFhdGF1KTtcbiAgY29uc3QgQUNIID0gZl9BQ0goViwgUSk7XG4gIC8vIGNvbnNvbGUubG9nKFwiQUNIOiBcIiArIEFDSCk7XG4gIC8vIGNvbnNvbGUubG9nKFwiUWI6IFwiICsgUWJbYWN0aXZpdHldKTtcblxuICBpZiAodCA+IHRhdSkge1xuICAgIGNvbnN0IEMgPSBmX0MocWEsIEFDSCwgUSwgdGF1KTtcbiAgICAvLyBjb25zb2xlLmxvZyhDKTtcbiAgICBsZXQgQ3RhdSA9IGZfQ3RhdShxYXRhdSwgQUNILCB0YXUsIFEsIHQpO1xuICAgIC8vIGlmIChpc05hTihDdGF1KSkge1xuICAgIC8vICAgICBDdGF1ID0gMVxuICAgIC8vIH1cbiAgICAvLyBjb25zb2xlLmxvZyhDdGF1KTtcbiAgICByZXR1cm4gMSAtIE1hdGguZXhwKC0oQyArIEN0YXUpICogUWJbYWN0aXZpdHldKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBDID0gZl9DKHFhLCBBQ0gsIFEsIHQpO1xuICAgIC8vIGNvbnNvbGUubG9nKEMpO1xuICAgIHJldHVybiAxIC0gTWF0aC5leHAoLUMgKiBRYlthY3Rpdml0eV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVEYXRhKHZvbHVtZSwgYWN0aXZpdHksIGFpciwgcGVvcGxlKSB7XG4gIGNvbnN0IFYgPSB2b2x1bWU7XG5cbiAgbGV0IHhBID0gW107XG4gIGxldCB5QSA9IFtdO1xuICBsZXQgcm93cyA9IFtdO1xuXG4gIGxldCBoYXNOYU4gPSBmYWxzZVxuXG4gIGxldCBtaW4gPSA1MFxuICBsZXQgbWF4ID0gMzAwMFxuICBcbiAgaWYgKDE1MCAqIHBlb3BsZSA+IG1heCkge1xuICAgICAgbWF4ID0gMTUwICogcGVvcGxlXG4gIH1cblxuICBmb3IgKGxldCBRID0gbWluOyBRIDw9IG1heDsgUSArPSA1MCkge1xuICAgIHhBID0gW107XG4gICAgbGV0IHJvdyA9IFtdO1xuXG4gICAgZm9yIChsZXQgdCA9IDAuMDsgdCA8PSA2LjA7IHQgKz0gMC4xKSB7XG4gICAgICAvLyBob3VycywrIGluY3JlbWVudHMgaW4gaG91cnNcbiAgICAgIHAgPSBwaXJhKHQsIFEsIGFjdGl2aXR5LCBWKTtcbiAgICAgIC8vY29uc29sZS5sb2coXCJQaXJhIGZvciB0PVwiICsgdCArIFwiLCBRPVwiICsgUSArIFwiOiBcIiArIHApO1xuICAgICAgcCA9IE1hdGgucm91bmQocCAqIDEwMDAwKSAvIDEwMDtcbiAgICAgIC8vaWYgKHQgPT0gNiAmJiBRID09IDUwMCkgcCA9IDEwMDtcbiAgICAvLyAgIGlmIChpc05hTihwKSB8fCBwID49IDEwMCkge1xuICAgIC8vICAgICAgIHAgPSAwXG4gICAgLy8gICB9XG4gICAgICByb3cucHVzaChwKTtcbiAgICAgIHhBLnB1c2godCk7XG4gICAgfVxuICAgIHlBLnB1c2goUSk7XG4gICAgcm93cy5wdXNoKHJvdyk7XG4gIH1cblxuICAvLyBmb3IgKGxldCBtaW51dGUgPSAwOyBtaW51dGUgPD0gMzYwOyBtaW51dGUgKz0gMzApIHtcbiAgLy8gICAgIGxldCB0ID0gbWludXRlIC8gNjA7XG4gIC8vICAgICBsZXQgbSA9IG1pbnV0ZSAlIDYwO1xuICAvLyAgICAgbGV0IGggPSAobWludXRlIC0gbSkgLyA2MDtcbiAgLy8gICAgIGxldCB0aW1lID0gaCArIFwiOlwiICsgbSArIFwiaFwiO1xuICAvLyB9XG5cbiAgcmV0dXJuIHtcbiAgICB0ZXN0OiB4QSxcbiAgICB4OiB4QSxcbiAgICB5OiB5QSxcbiAgICB6OiByb3dzLFxuICAgIGhhc05hTjogaGFzTmFOLFxuICB9O1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlRGF0YVNpbXBsZSh2b2x1bWUsIGFjdGl2aXR5LCBRLCBwZW9wbGUpIHtcbiAgY29uc3QgViA9IHZvbHVtZTtcbiBcbiAgY29uc29sZS5sb2coYFRvdGFsIGFpcmZsb3cgZm9yIGFsbCBwZW9wbGUgaW4gdGhlIHJvb20gaXMgKFEpIGlzICR7UX1gKVxuXG4gIGxldCB4ID0gW107XG4gIGxldCB5ID0gW107IC8vIHBpcmFcbiAgbGV0IHgyID0gW107IC8vIG9ubHkgdGltZXN0YW1wcyBmb3IgdGhlIGZ1bGwgaG91clxuICBsZXQgeTIgPSBbXTsgLy8gaW5mZWN0ZWQgcGVvcGxlXG5cbiAgZm9yIChsZXQgdCA9IDA7IHQgPD0gNjsgdCArPSAxKSB7XG4gICAgcCA9IHBpcmEodCwgUSwgYWN0aXZpdHksIFYpO1xuICAgIHAgPSBNYXRoLnJvdW5kKHAgKiAxMDAwMCkgLyAxMDA7XG4gICAgeS5wdXNoKHApO1xuICAgIHgucHVzaCh0KTtcbiAgICB4Mi5wdXNoKHQpXG4gICAgeTIucHVzaChNYXRoLnJvdW5kKHAgKiBwZW9wbGUgLyAxMDApKTtcbiAgICAvLyBpbnRlcm1lZGlhdGUgc3RlcHMgZm9yIHBpcmEgb25seSwgbm90IGZvciBuby4gaW5mZWN0ZWQgcGVvcGxlXG4gICAgZm9yIChsZXQgc3QgPSAwLjE7IHN0IDwgMTsgc3QgKz0gMC4xKSB7XG4gICAgICAgIHAgPSBwaXJhKHQgKyBzdCwgUSwgYWN0aXZpdHksIFYpO1xuICAgICAgICBwID0gTWF0aC5yb3VuZChwICogMTAwMDApIC8gMTAwO1xuICAgICAgICB5LnB1c2gocCk7XG4gICAgICAgIHgucHVzaCh0ICsgc3QpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBbXG4gICAge1xuICAgICAgeDogeCxcbiAgICAgIHk6IHlcbiAgICB9LFxuICAgIHtcbiAgICAgIHg6IHgyLFxuICAgICAgeTogeTJcbiAgICB9XG4gIF07XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcHJlcGFyZURhdGE6IHByZXBhcmVEYXRhLFxuICAgIHByZXBhcmVEYXRhU2ltcGxlOiBwcmVwYXJlRGF0YVNpbXBsZSxcbiAgICBwaXJhOiBwaXJhLFxuICAgIGZfcWE6IGZfcWEsXG4gICAgZl9ROiBmX1Fcbn1cbiIsImNvbnN0IGRhdGFGID0gcmVxdWlyZShcIi4vZGF0YS5qc1wiKS5wcmVwYXJlRGF0YTtcbmNvbnN0IGRhdGFGU2ltcGxlID0gcmVxdWlyZShcIi4vZGF0YS5qc1wiKS5wcmVwYXJlRGF0YVNpbXBsZTtcbmNvbnN0IGZfUSA9IHJlcXVpcmUoXCIuL2RhdGEuanNcIikuZl9RO1xuLy8gY29uc3QgUGxvdGx5ID0gcmVxdWlyZShcInBsb3RseS5qcy1nbDNkLWRpc3QtbWluXCIpIC8vIG5vdCBpbnN0YWxsZWQgdmlhIG5wbSB0byByZWR1Y2UgYnVuZGxlIHNpemVcblxudmFyIHZvbHVtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidm9sdW1lXCIpLnZhbHVlO1xudmFyIGFjdGl2aXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhY3Rpdml0eVwiKS52YWx1ZTtcbi8vIHZhciB2aXN0eXBlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aXN0eXBlXCIpLnZhbHVlO1xudmFyIG1vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vZGVcIikudmFsdWU7IC8vIHNpbXBsZSBvciBleHBlcnRcbnZhciBhaXJpbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFpcmluZ1wiKS52YWx1ZTsgLy8gaW4gdGhlIGZvcm11bGEsIHRoaXMgaXMgUVxudmFyIHBlb3BsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGVvcGxlXCIpLnZhbHVlO1xudmFyIHVzZWRRID0gLTE7XG5jYWxjdWxhdGVVc2VkUSgpO1xuXG5jb25zdCBjaGFydERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hhcnRcIik7XG5cbmZ1bmN0aW9uIG1vZGVVcGRhdGVkKG5ld01vZGUpIHtcbiAgbW9kZSA9IG5ld01vZGU7XG4gIHVwZGF0ZUdyYXBoKCk7XG59XG5cbmZ1bmN0aW9uIHZvbHVtZVVwZGF0ZWQobmV3Vm9sdW1lKSB7XG4gIHZvbHVtZSA9IG5ld1ZvbHVtZTtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gYWN0aXZpdHlVcGRhdGVkKG5ld0FjdGl2aXR5KSB7XG4gIGFjdGl2aXR5ID0gbmV3QWN0aXZpdHk7XG4gIHVwZGF0ZUdyYXBoKCk7XG59XG5cbmZ1bmN0aW9uIGFpcmluZ1VwZGF0ZWQobmV3QWlyaW5nKSB7XG4gIGFpcmluZyA9IG5ld0FpcmluZztcbiAgY2FsY3VsYXRlVXNlZFEoKVxuICB1cGRhdGVHcmFwaCgpO1xufVxuXG5mdW5jdGlvbiBwZW9wbGVVcGRhdGVkKG5ld1Blb3BsZSkge1xuICBwZW9wbGUgPSBuZXdQZW9wbGU7XG4gIGNhbGN1bGF0ZVVzZWRRKClcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gdmlzdHlwZVVwZGF0ZWQobmV3VmlzVHlwZSkge1xuICB2aXN0eXBlID0gbmV3VmlzVHlwZTtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuLy8gdXNlZFEgdXBkYXRlZCBieSBtYW51YWwgdXNlciBpbnB1dFxuZnVuY3Rpb24gdXNlZFFVcGRhdGVkKG5ld1VzZWRRKSB7XG4gIHVzZWRRID0gbmV3VXNlZFE7XG4gIHVwZGF0ZUdyYXBoKCk7XG59XG5cbi8vIHJlY2FsY3VsYXRlIHVzZWRRIGJhc2VkIG9uIGFpcmluZyBhbmQgcGVvcGxlXG5mdW5jdGlvbiBjYWxjdWxhdGVVc2VkUSgpIHtcbiAgdXNlZFEgPSBmX1EoYWlyaW5nKSAqIHBlb3BsZTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VkUVwiKS52YWx1ZSA9IHVzZWRRXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUdyYXBoKCkge1xuICBjb25zb2xlLmxvZyhcIlRoZSBncmFwaCBtdXN0IGJlIHVwZGF0ZWQhXCIpO1xuICBjb25zb2xlLmxvZyhgVm9sdW1lOiAke3ZvbHVtZX0sIGFjdGl2aXR5OiAke2FjdGl2aXR5fSwgYWlyaW5nOiAke2FpcmluZ31gKTtcblxuICBpZiAobW9kZSA9PT0gXCJzaW1wbGVcIikge1xuICAgIGRhdGEgPSBkYXRhRlNpbXBsZSh2b2x1bWUsIGFjdGl2aXR5LCB1c2VkUSwgcGVvcGxlKVxuXG4gICAgZHJhd1NpbXBsZVBsb3QoZGF0YSlcbiAgfSBlbHNlIGlmIChtb2RlID09PSBcImV4cGVydFwiKSB7XG4gICAgZGF0YSA9IGRhdGFGKHZvbHVtZSwgYWN0aXZpdHksIGFpcmluZywgcGVvcGxlKTtcblxuICAgIC8vIGlmICh2aXN0eXBlID09PSBcInN1cmZhY2VcIikge1xuICAgIC8vICAgZHJhd1N1cmZhY2VQbG90KGRhdGEpO1xuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICBkcmF3Q29udG91clBsb3QoZGF0YSk7XG4gICAgLy8gfVxuXG4gICAgZHJhd0NvbnRvdXJQbG90KGRhdGEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdTaW1wbGVQbG90KGRhdGEpIHtcbiAgZGF0YVswXS5tb2RlID0gXCJsaW5lc1wiO1xuICBkYXRhWzBdLm5hbWUgPSBcIlBJUkEgKGluICUpXCJcbiAgZGF0YVswXS55YXhpcyA9IFwieVwiXG5cbiAgZGF0YVsxXS50eXBlID0gXCJiYXJcIjtcbiAgZGF0YVsxXS55YXhpcyA9IFwieTJcIjtcbiAgZGF0YVsxXS5uYW1lID0gXCJQb3RlbnRpZWxsIEFuZ2VzdGVja3RlXCJcblxuICBjb25zb2xlLmxvZyhkYXRhKVxuXG4gIHZhciBsYXlvdXQgPSB7XG4gICAgc2hhcmVYOiB0cnVlLFxuICAgIHhheGlzOiB7XG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgdGV4dDogXCJaZWl0IGluIFN0dW5kZW5cIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgIHRpdGxlOiAnUElSQSAoaW4gJSknLFxuICAgICAgb3ZlcmxheWluZzogJ3kyJyxcbiAgICAgIHRpY2t2YWxzOiBbMTAsIDIwLCAzMCwgNDAsIDUwLCA2MCwgNzAsIDgwLCA5MCwgMTAwXSxcbiAgICAgIHJhbmdlOiBbMCwgMTAwXVxuICAgIH0sXG4gICAgeWF4aXMyOiB7XG4gICAgICB0aWNrbW9kZTogXCJhdXRvXCIsXG4gICAgICB0aXRsZTogJ0FuemFobCBzaWNoIHBvdGVudGllbGwgYW5nZXN0ZWNrdGVyIFBlcnNvbmVuIChnZXJ1bmRldCknLFxuICAgICAgc2lkZTogJ3JpZ2h0JyxcbiAgICAgIHJhbmdlOiBbMCwgcGVvcGxlXVxuICAgIH0sXG4gICAgbGVnZW5kOiB7XG4gICAgICAgIHk6IDEsXG4gICAgICAgIHg6IDAsXG4gICAgICB9XG4gIH07XG5cbiAgUGxvdGx5Lm5ld1Bsb3QoY2hhcnREaXYsIGRhdGEsIGxheW91dCwgeyByZXNwb25zaXZlOiB0cnVlIH0pO1xufVxuXG5mdW5jdGlvbiBkcmF3U3VyZmFjZVBsb3QoZGF0YSkge1xuICBkYXRhLnR5cGUgPSBcInN1cmZhY2VcIjtcbiAgZGF0YS5jb250b3VycyA9IHtcbiAgICB6OiB7XG4gICAgICBzaG93OiB0cnVlLFxuICAgICAgdXNlY29sb3JtYXA6IHRydWUsXG4gICAgICBoaWdobGlnaHRjb2xvcjogXCIjNDJmNDYyXCIsXG4gICAgICBwcm9qZWN0OiB7IHo6IHRydWUgfSxcbiAgICB9LFxuICB9O1xuICBjb25zdCBsYXlvdXQgPSB7XG4gICAgeGF4aXM6IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6IFwiWmVpdCBpbiBTdHVuZGVuXCIsXG4gICAgICB9LFxuICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6IFwiVm9sdW1lbnN0cm9tIGluIG1eMy9oXCIsXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgY29uc29sZS5sb2coZGF0YSk7XG4gIFBsb3RseS5uZXdQbG90KGNoYXJ0RGl2LCBbZGF0YV0sIGxheW91dCwgeyByZXNwb25zaXZlOiB0cnVlIH0pO1xufVxuXG5mdW5jdGlvbiBkcmF3Q29udG91clBsb3QoZGF0YSkge1xuICBkYXRhLnR5cGUgPSBcImNvbnRvdXJcIjtcblxuICBkYXRhLmNvbG9yYmFyID0ge1xuICAgIHRpdGxlOiBcIlBJUkFcIixcbiAgICB0aWNrc3VmZml4OiBcIiVcIixcbiAgfTtcblxuICBkYXRhLmhvdmVydGVtcGxhdGUgPSBcIlBJUkE6ICV7ejouMmZ9JTxleHRyYT48L2V4dHJhPlwiO1xuXG4gIGNvbnN0IGxheW91dCA9IHtcbiAgICBzaG93YXhlc2xhYmVsczogdHJ1ZSxcbiAgICB4YXhpc190aXRsZTogXCJaZWl0IGluIFN0dW5kZW5cIixcbiAgICB4YXhpczoge1xuICAgICAgdGl0bGU6IHtcbiAgICAgICAgdGV4dDogXCJaZWl0IGluIFN0dW5kZW5cIixcbiAgICAgIH0sXG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgdGl0bGU6IHtcbiAgICAgICAgdGV4dDogXCJWb2x1bWVuc3Ryb20gaW4gbcKzL2hcIixcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgUGxvdGx5Lm5ld1Bsb3QoY2hhcnREaXYsIFtkYXRhXSwgbGF5b3V0LCB7IHJlc3BvbnNpdmU6IHRydWUgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtb2RlVXBkYXRlZDogbW9kZVVwZGF0ZWQsXG4gIHZvbHVtZVVwZGF0ZWQ6IHZvbHVtZVVwZGF0ZWQsXG4gIGFjdGl2aXR5VXBkYXRlZDogYWN0aXZpdHlVcGRhdGVkLFxuICBhaXJpbmdVcGRhdGVkOiBhaXJpbmdVcGRhdGVkLFxuICB2aXN0eXBlVXBkYXRlZDogdmlzdHlwZVVwZGF0ZWQsXG4gIHBlb3BsZVVwZGF0ZWQ6IHBlb3BsZVVwZGF0ZWQsXG4gIHVzZWRRVXBkYXRlZDogdXNlZFFVcGRhdGVkXG59O1xuIiwiY29uc3Qgdm9sdW1lID0gcmVxdWlyZShcIi4vdm9sdW1lLmpzXCIpO1xuY29uc3QgZ3JhcGggPSByZXF1aXJlKFwiLi9ncmFwaC5qc1wiKTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RlXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgLy8gaWYgZXhwZXJ0LCBoaWRlIHNpbXBsZSBodG1sIGVsZW1lbnRzXG4gIGlmIChldmVudC50YXJnZXQudmFsdWUgPT0gXCJleHBlcnRcIikge1xuICAgIHNpbXBlbEVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNpbXBsZVwiKVxuICAgIGZvciAoZWwgb2Ygc2ltcGVsRWxlbWVudHMpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4gICAgfVxuICAgIGV4cGVydEVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImV4cGVydFwiKVxuICAgIGZvciAoZWwgb2YgZXhwZXJ0RWxlbWVudHMpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxuICAgIH1cbiAgfSBlbHNlIGlmIChldmVudC50YXJnZXQudmFsdWUgPT0gXCJzaW1wbGVcIikge1xuICAgIGV4cGVydEVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNpbXBsZVwiKVxuICAgIGZvciAoZWwgb2YgZXhwZXJ0RWxlbWVudHMpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxuICAgIH1cbiAgICBleHBlcnRFbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJleHBlcnRcIilcbiAgICBmb3IgKGVsIG9mIGV4cGVydEVsZW1lbnRzKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxuICAgIH1cbiAgfVxuICBncmFwaC5tb2RlVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpXG59KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhY3Rpdml0eVwiKS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGdyYXBoLmFjdGl2aXR5VXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpO1xufSk7XG5cbi8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlzdHlwZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4vLyAgIGdyYXBoLnZpc3R5cGVVcGRhdGVkKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4vLyB9KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwZW9wbGVcIikuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQudmFsdWUgIT0gXCJcIikge1xuICAgICAgICBhbW91bnQgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgIGlmICgxID4gYW1vdW50IHx8IGFtb3VudCA+IDEwMCkge1xuICAgICAgICAgICAgYW1vdW50ID0gM1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gYW1vdW50XG4gICAgICAgIH1cbiAgICAgICAgZ3JhcGgucGVvcGxlVXBkYXRlZChhbW91bnQpO1xuICAgIH1cbn0pO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFpcmluZ1wiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZ3JhcGguYWlyaW5nVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpXG59KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1c2VkUVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldC52YWx1ZSA8IDEpIHtcbiAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gMVxuICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID4gMzAwMCkge1xuICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSAzMDAwXG4gICAgfVxuICAgIGdyYXBoLnVzZWRRVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpXG59KTsiLCJjb25zdCBncmFwaCA9IHJlcXVpcmUoXCIuL2dyYXBoLmpzXCIpO1xuXG5mdW5jdGlvbiBJbnB1dEVsZW1lbnQoZWxlbWVudCwgZGF0YSkge1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICBlbGVtZW50LnZhbHVlID0gZGF0YTtcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMsIGZhbHNlKTtcbn1cblxuLyoqXG4gKiBDYWxsZWQgd2hlbiB0aGUgaW5wdXQgZWxlbWVudCBpcyB1cGRhdGVkLCBlLmcuLCBieSB1c2luZyBhcnJvd3Mgd2hlbiB0eXBlPW51bWJlciBvciBieSBwcmVzc2luZyBlbnRlclxuICovXG5JbnB1dEVsZW1lbnQucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgIGNhc2UgXCJjaGFuZ2VcIjpcbiAgICAgIHRoaXMuY2hhbmdlKHRoaXMuZWxlbWVudC52YWx1ZSk7XG4gICAgICB1cGRhdGVWb2x1bWUoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBVcGRhdGUgdGhlIGVsZW1lbnQ7IHRoaXMgbWV0aG9kIHVwZGF0ZXMgdGhlIERPTSByZXByZXNlbnRhdGlvbiBhbmQgdGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uXG4gKi9cbklucHV0RWxlbWVudC5wcm90b3R5cGUuY2hhbmdlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHRoaXMuZGF0YSA9IHZhbHVlO1xuICB0aGlzLmVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbn07XG5cbmZ1bmN0aW9uIHVwZGF0ZVZvbHVtZSgpIHtcbiAgaWYgKGxlbmd0aEVsZW1lbnQuZGF0YSA+IDEwKSB7XG4gICAgbGVuZ3RoRWxlbWVudC5jaGFuZ2UoMTApXG4gIH1cbiAgaWYgKGxlbmd0aEVsZW1lbnQuZGF0YSA8IDEpIHtcbiAgICBsZW5ndGhFbGVtZW50LmNoYW5nZSgxKVxuICB9XG5cbiAgaWYgKHdpZHRoRWxlbWVudC5kYXRhID4gMTApIHtcbiAgICBsZW5ndGhFbGVtZW50LmNoYW5nZSgxMClcbiAgfVxuICBpZiAod2lkdGhFbGVtZW50LmRhdGEgPCAxKSB7XG4gICAgbGVuZ3RoRWxlbWVudC5jaGFuZ2UoMSlcbiAgfVxuXG4gIGlmIChoZWlnaHRFbGVtZW50LmRhdGEgPiA1KSB7XG4gICAgbGVuZ3RoRWxlbWVudC5jaGFuZ2UoNSlcbiAgfVxuICBpZiAoaGVpZ2h0RWxlbWVudC5kYXRhIDwgMSkge1xuICAgIGxlbmd0aEVsZW1lbnQuY2hhbmdlKDEpXG4gIH1cblxuICBjb25zdCB2b2x1bWUgPSBsZW5ndGhFbGVtZW50LmRhdGEgKiB3aWR0aEVsZW1lbnQuZGF0YSAqIGhlaWdodEVsZW1lbnQuZGF0YTtcbiAgY29uc29sZS5sb2codm9sdW1lKTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2b2x1bWVcIikudmFsdWUgPSB2b2x1bWU7XG4gIGdyYXBoLnZvbHVtZVVwZGF0ZWQodm9sdW1lKTtcbiAgcmV0dXJuIHZvbHVtZTtcbn1cblxuLy8gaXQgaXMgcG9zc2libGUgdG8gdXBkYXRlIHRoZXNlIGVsZW1lbnRzLCBlLmcuLCB3aXRoIGxlbmd0aEVsZW1lbnQuY2hhbmdlKDEwKVxudmFyIGxlbmd0aEVsZW1lbnQgPSBuZXcgSW5wdXRFbGVtZW50KFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlbmd0aFwiKSxcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsZW5ndGhcIikudmFsdWVcbik7XG52YXIgd2lkdGhFbGVtZW50ID0gbmV3IElucHV0RWxlbWVudChcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3aWR0aFwiKSxcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3aWR0aFwiKS52YWx1ZVxuKTtcbnZhciBoZWlnaHRFbGVtZW50ID0gbmV3IElucHV0RWxlbWVudChcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWlnaHRcIiksXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaGVpZ2h0XCIpLnZhbHVlXG4pO1xudXBkYXRlVm9sdW1lKCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXQ6IHVwZGF0ZVZvbHVtZSxcbiAgaW5pdDogdXBkYXRlVm9sdW1lLFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=