!function(e){var t={};function n(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(a,o,function(t){return e[t]}.bind(null,o));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){const n={low_activity_lying:.45,low_activity:.54,singing:.65,mid_activity:.9,sports:1.2,test_1:.54,test_2:.65};function a(e){return"singing"==e?3500:"test_2"==e?2500:100}function o(e,t){return"no"==e?1:"medical"==e?"tight"==t?.4:.9:"one_cotton"==e?"tight"==t?.85:.95:"two_cotton"==e?"tight"==t?.7:.95:"ffp1"==e?"tight"==t?.25:.6:(console.log(`No mask coefficient for ${e} and ${t}`),1)}function i(e,t,o){const i=function(e){switch(console.log(e),e){case"standard":return 3.35;case"mutated":return 4}}(t),l=2.7618*(Math.exp(1.1761*i)-1),u=a("low_activity");return o*l*(a(e)/u)*(n[e]/n.low_activity)}function l(e,t,n,a){let o=390625*t+225625;return o*=Math.exp(t*a),o-=225625,o*=Math.exp(-t*a-.5776*a),o=390625*t-o,o*=e,o/(n*(225625*t+130321))}function u(e,t,a,o,u,d){0==t&&(t+=.01);const r=function(e,t){return e/t}(u,t),c=i(a,o,d),s=function(e,t){return e*Math.exp(-.5776*t)}(c,r),p=function(e,t){return t/e}(u,t);if(e>r){const o=l(c,p,t,r);let i=function(e,t,n,a,o){return e*(t*o+Math.exp(-t*o)-1/Math.E-1)/(a*t)}(s,p,0,t,e);return 1-Math.exp(-(o+i)*n[a])}{const o=l(c,p,t,e);return 1-Math.exp(-o*n[a])}}e.exports={prepareData:function(e,t,n,a,i,l){const d=e,r=o(i,l);let c=[],s=[],m=[];const g=a;for(let e=50;e<=g;e+=50){c=[];let a=[];for(let o=0;o<=6;o+=.1)p=u(o,e,t,n,d,r),p=Math.round(1e4*p)/100,a.push(p),c.push(o);s.push(e),m.push(a)}return{test:c,x:c,y:s,z:m}},prepareDataSimple:function(e,t,n,a,i,l,d){const r=e,c=o(l,d);console.log("Total airflow for all people in the room is (Q) is "+a);let s=[],m=[],g=[],f=[];for(let e=0;e<=6;e+=1){p=u(e,a,t,n,r,c),p=Math.round(1e4*p)/100,m.push(p),s.push(e),g.push(e),f.push(Math.round(p*(i-1)/100));for(let o=.1;o<1;o+=.1)p=u(e+o,a,t,n,r,c),p=Math.round(1e4*p)/100,m.push(p),s.push(e+o)}return[{x:s,y:m},{x:g,y:f}]},pira:u,f_qa:i,f_Q:function(e){return"very_bad"==e?10:"bad"==e?20:"ok"==e?30:"good"==e?40:"very_good"==e?60:void 0}}},function(e,t,n){const a=n(0).prepareData,o=n(0).prepareDataSimple,i=n(0).f_Q;var l=document.getElementById("volume").value,u=document.getElementById("activity").value,d=document.getElementById("virus").value,r=document.getElementById("mask").value,c=document.getElementById("maskPosition").value,s=document.getElementById("mode").value,p=document.getElementById("airing").value,m=document.getElementById("people").value,g=-1,f=0,v=-1;E();var y=-1;x();const h=document.getElementById("chart");function E(){g=i(p)*m,v=g+f,document.getElementById("isQ").value=g,document.getElementById("usedQ").value=v}function x(){y=i("very_good")*m,document.getElementById("maxQ").value=y}function I(){console.log("The graph must be updated!"),console.log(`Volume: ${l}, activity: ${u}, airing: ${p}`),"simple"===s?(data=o(l,u,d,v,m,r,c),function(e){e[0].mode="lines",e[0].name="PIRA (in %)",e[0].yaxis="y",e[1].type="bar",e[1].yaxis="y2",e[1].name="Potentiell Angesteckte",console.log(e);var t={shareX:!0,xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:"PIRA (in %)",overlaying:"y2",tickvals:[10,20,30,40,50,60,70,80,90,100],range:[0,100]},yaxis2:{tickmode:"auto",title:"Anzahl sich potentiell angesteckter Personen (gerundet)",side:"right",range:[0,m-1]},legend:{y:1,x:0}};Plotly.newPlot(h,e,t,{responsive:!0})}(data)):"expert"===s&&(data=a(l,u,d,y,r,c),function(e){e.type="contour",e.colorbar={title:"PIRA",ticksuffix:"%"},e.hovertemplate="PIRA: %{z:.2f}%<extra></extra>";console.log(e),Plotly.newPlot(h,[e],{showaxeslabels:!0,xaxis_title:"Zeit in Stunden",xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:{text:"Frischluftmenge in mÂ³/h"}}},{responsive:!0})}(data))}e.exports={modeUpdated:function(e){s=e,I()},volumeUpdated:function(e){l=e,I()},activityUpdated:function(e){u=e,I()},virusUpdated:function(e){d=e,I()},maskUpdated:function(e){r=e,I()},maskPositionUpdated:function(e){c=e,I()},airingUpdated:function(e){p=e,E(),I()},vistypeUpdated:function(e){vistype=e,I()},peopleUpdated:function(e){m=e,E(),x(),I()},addQUpdated:function(e){f=e,E(),I()},maxQUpdated:function(e){y=e,I()}}},function(e,t,n){n(3);const a=n(1);document.getElementById("mode").addEventListener("input",(function(e){if("expert"==e.target.value){for(el of(simpelElements=document.getElementsByClassName("simple"),simpelElements))el.style.display="none";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="block"}else if("simple"==e.target.value){for(el of(expertElements=document.getElementsByClassName("simple"),expertElements))el.style.display="block";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="none"}a.modeUpdated(e.target.value)})),document.getElementById("activity").addEventListener("input",(function(e){a.activityUpdated(e.target.value)})),document.getElementById("virus").addEventListener("input",(function(e){a.virusUpdated(e.target.value)})),document.getElementById("mask").addEventListener("input",(function(e){a.maskUpdated(e.target.value)})),document.getElementById("maskPosition").addEventListener("input",(function(e){a.maskPositionUpdated(e.target.value)})),document.getElementById("people").addEventListener("change",(function(e){""!=e.target.value&&(e.target.value<1?e.target.value=1:e.target.value>100&&(e.target.value=100),a.peopleUpdated(e.target.value))})),document.getElementById("airing").addEventListener("change",(function(e){a.airingUpdated(e.target.value)})),document.getElementById("addQ").addEventListener("change",(function(e){e.target.value<0?e.target.value=0:e.target.value>5e3&&(e.target.value=5e3),a.addQUpdated(parseInt(e.target.value))})),document.getElementById("maxQ").addEventListener("change",(function(e){e.target.value<100?e.target.value=100:e.target.value>6e3&&(e.target.value=6e3),a.maxQUpdated(e.target.value)}))},function(e,t,n){const a=n(1);function o(e,t){this.data=t,this.element=e,e.value=t,e.addEventListener("change",this,!1)}function i(){l.data>10&&l.change(10),l.data<1&&l.change(1),u.data>10&&u.change(10),u.data<1&&u.change(1),d.data>5&&d.change(5),d.data<1&&d.change(1);const e=l.data*u.data*d.data;return console.log(e),document.getElementById("volume").value=e,a.volumeUpdated(e),e}o.prototype.handleEvent=function(e){switch(e.type){case"change":this.change(this.element.value),i()}},o.prototype.change=function(e){this.data=e,this.element.value=e};var l=new o(document.getElementById("length"),document.getElementById("length").value),u=new o(document.getElementById("width"),document.getElementById("width").value),d=new o(document.getElementById("height"),document.getElementById("height").value);i(),e.exports={get:i,init:i}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dyYXBoLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdm9sdW1lLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiUWIiLCJsb3dfYWN0aXZpdHlfbHlpbmciLCJsb3dfYWN0aXZpdHkiLCJzaW5naW5nIiwibWlkX2FjdGl2aXR5Iiwic3BvcnRzIiwidGVzdF8xIiwidGVzdF8yIiwiZl9FIiwiYWN0aXZpdHkiLCJmX21hc2siLCJtYXNrIiwibWFza1Bvc2l0aW9uIiwiY29uc29sZSIsImxvZyIsImZfcWEiLCJ2aXJ1cyIsIm1hc2tDb2VmZmljaWVudCIsIlJfMCIsIlJfWmVybyIsInFfMCIsIk1hdGgiLCJleHAiLCJFXzAiLCJmX0MiLCJxYSIsIkFDSCIsIlEiLCJwaXJhIiwiViIsInRhdSIsImZfdGF1IiwicWF0YXUiLCJmX3FhdGF1IiwiZl9BQ0giLCJDIiwiQ3RhdSIsIkUiLCJmX0N0YXUiLCJwcmVwYXJlRGF0YSIsInZvbHVtZSIsIm1heFEiLCJ4QSIsInlBIiwicm93cyIsIm1heCIsInJvdyIsInJvdW5kIiwicHVzaCIsInRlc3QiLCJ4IiwieSIsInoiLCJwcmVwYXJlRGF0YVNpbXBsZSIsInBlb3BsZSIsIngyIiwieTIiLCJzdCIsImZfUSIsImFpcmluZyIsImRhdGFGIiwiZGF0YUZTaW1wbGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaXNRIiwiYWRkUSIsInVzZWRRIiwiY2FsY3VsYXRlVXNlZFEiLCJjYWxjdWxhdGVNYXhRIiwiY2hhcnREaXYiLCJ1cGRhdGVHcmFwaCIsImRhdGEiLCJ5YXhpcyIsInR5cGUiLCJsYXlvdXQiLCJzaGFyZVgiLCJ4YXhpcyIsInRpdGxlIiwidGV4dCIsIm92ZXJsYXlpbmciLCJ0aWNrdmFscyIsInJhbmdlIiwieWF4aXMyIiwidGlja21vZGUiLCJzaWRlIiwibGVnZW5kIiwiUGxvdGx5IiwibmV3UGxvdCIsInJlc3BvbnNpdmUiLCJkcmF3U2ltcGxlUGxvdCIsImNvbG9yYmFyIiwidGlja3N1ZmZpeCIsImhvdmVydGVtcGxhdGUiLCJzaG93YXhlc2xhYmVscyIsInhheGlzX3RpdGxlIiwiZHJhd0NvbnRvdXJQbG90IiwibW9kZVVwZGF0ZWQiLCJuZXdNb2RlIiwidm9sdW1lVXBkYXRlZCIsIm5ld1ZvbHVtZSIsImFjdGl2aXR5VXBkYXRlZCIsIm5ld0FjdGl2aXR5IiwidmlydXNVcGRhdGVkIiwibmV3VmlydXMiLCJtYXNrVXBkYXRlZCIsIm5ld01hc2siLCJtYXNrUG9zaXRpb25VcGRhdGVkIiwibmV3TWFza1Bvc2l0aW9uIiwiYWlyaW5nVXBkYXRlZCIsIm5ld0FpcmluZyIsInZpc3R5cGVVcGRhdGVkIiwibmV3VmlzVHlwZSIsInZpc3R5cGUiLCJwZW9wbGVVcGRhdGVkIiwibmV3UGVvcGxlIiwiYWRkUVVwZGF0ZWQiLCJuZXdBZGRRIiwibWF4UVVwZGF0ZWQiLCJuZXdNYXhRIiwiZ3JhcGgiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0YXJnZXQiLCJlbCIsInNpbXBlbEVsZW1lbnRzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImV4cGVydEVsZW1lbnRzIiwicGFyc2VJbnQiLCJJbnB1dEVsZW1lbnQiLCJlbGVtZW50IiwidGhpcyIsInVwZGF0ZVZvbHVtZSIsImxlbmd0aEVsZW1lbnQiLCJjaGFuZ2UiLCJ3aWR0aEVsZW1lbnQiLCJoZWlnaHRFbGVtZW50IiwiaGFuZGxlRXZlbnQiLCJpbml0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0Is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Q3ZCK0QsRUFBY0MsT0FBTyxHQUduQkMsRUFBYWpFLEtBQU8sSUFDdEJpRSxFQUFhRCxPQUFPLElBRWxCQyxFQUFhakUsS0FBTyxHQUN0QmlFLEVBQWFELE9BQU8sR0FHbEJFLEVBQWNsRSxLQUFPLEdBQ3ZCa0UsRUFBY0YsT0FBTyxHQUVuQkUsRUFBY2xFLEtBQU8sR0FDdkJrRSxFQUFjRixPQUFPLEdBR3ZCLE1BQU0vRixFQUFTOEYsRUFBYy9ELEtBQU9pRSxFQUFhakUsS0FBT2tFLEVBQWNsRSxLQUl0RSxPQUhBMUQsUUFBUUMsSUFBSTBCLEdBQ1pzQixTQUFTQyxlQUFlLFVBQVU5RSxNQUFRdUQsRUFDMUMrRSxFQUFNckIsY0FBYzFELEdBQ2JBLEVBMUNUMEYsRUFBYXRJLFVBQVU4SSxZQUFjLFNBQVVqQixHQUM3QyxPQUFRQSxFQUFNaEQsTUFDWixJQUFLLFNBQ0gyRCxLQUFLRyxPQUFPSCxLQUFLRCxRQUFRbEosT0FDekJvSixNQU9OSCxFQUFhdEksVUFBVTJJLE9BQVMsU0FBVXRKLEdBQ3hDbUosS0FBSzdELEtBQU90RixFQUNabUosS0FBS0QsUUFBUWxKLE1BQVFBLEdBaUN2QixJQUFJcUosRUFBZ0IsSUFBSUosRUFDdEJwRSxTQUFTQyxlQUFlLFVBQ3hCRCxTQUFTQyxlQUFlLFVBQVU5RSxPQUVoQ3VKLEVBQWUsSUFBSU4sRUFDckJwRSxTQUFTQyxlQUFlLFNBQ3hCRCxTQUFTQyxlQUFlLFNBQVM5RSxPQUUvQndKLEVBQWdCLElBQUlQLEVBQ3RCcEUsU0FBU0MsZUFBZSxVQUN4QkQsU0FBU0MsZUFBZSxVQUFVOUUsT0FFcENvSixJQUVBdEssRUFBT0QsUUFBVSxDQUNmZSxJQUFLd0osRUFDTE0sS0FBTU4iLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwiY29uc3QgUWIgPSB7XG4gIGxvd19hY3Rpdml0eV9seWluZzogMC40NSxcbiAgbG93X2FjdGl2aXR5OiAwLjU0LFxuICBzaW5naW5nOiAwLjY1LFxuICBtaWRfYWN0aXZpdHk6IDAuOSxcbiAgc3BvcnRzOiAxLjIsXG4gIHRlc3RfMTogMC41NCwgLy8gdmFsdWUgdXNlZCBpbiB0ZXN0X2RhdGEvUElSX01vZGVsbC5qcGdcbiAgdGVzdF8yOiAwLjY1LCAvLyB2YWx1ZSB1c2VkIGluIHRlc3RfZGF0YS9QSVJfTW9kZWxsX2FrdC5qcGcgYXMgaW5zdHJ1Y3RlZCBieSBtYWlsXG59O1xuXG5mdW5jdGlvbiBmX3RhdShWLCBRKSB7XG4gIHJldHVybiBWIC8gUTtcbn1cblxuZnVuY3Rpb24gUl9aZXJvKHZpcnVzKSB7XG4gICAgY29uc29sZS5sb2codmlydXMpXG4gICAgc3dpdGNoICh2aXJ1cykge1xuICAgICAgICBjYXNlIFwic3RhbmRhcmRcIjpcbiAgICAgICAgICAgIHJldHVybiAzLjM1O1xuICAgICAgICBjYXNlIFwibXV0YXRlZFwiOlxuICAgICAgICAgICAgcmV0dXJuIDQuMDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZfRShhY3Rpdml0eSkge1xuICBpZiAoYWN0aXZpdHkgPT0gXCJzaW5naW5nXCIpIHtcbiAgICByZXR1cm4gMzUwMDtcbiAgfSBlbHNlIGlmIChhY3Rpdml0eSA9PVwidGVzdF8yXCIpIHtcbiAgICByZXR1cm4gMjUwMDsgLy8gdmFsdWUgcmVjZWl2ZWQgdmlhIG1haWwgZnJvbSBrcmllZ2VsXG4gIH0gZWxzZSByZXR1cm4gMTAwO1xufVxuXG5mdW5jdGlvbiBmX1EoYWlyaW5nKSB7XG4gIGlmIChhaXJpbmcgPT0gXCJ2ZXJ5X2JhZFwiKSB7XG4gICAgcmV0dXJuIDEwO1xuICB9IGVsc2UgaWYgKGFpcmluZyA9PSBcImJhZFwiKSB7XG4gICAgcmV0dXJuIDIwO1xuICB9IGVsc2UgaWYgKGFpcmluZyA9PSBcIm9rXCIpIHtcbiAgICByZXR1cm4gMzA7XG4gIH0gZWxzZSBpZiAoYWlyaW5nID09IFwiZ29vZFwiKSB7XG4gICAgcmV0dXJuIDQwO1xuICB9IGVsc2UgaWYgKGFpcmluZyA9PSBcInZlcnlfZ29vZFwiKSB7XG4gICAgcmV0dXJuIDYwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZfbWFzayhtYXNrLCBtYXNrUG9zaXRpb24pIHtcbiAgICBpZiAobWFzayA9PSBcIm5vXCIpIHtcbiAgICAgICAgcmV0dXJuIDEuMFxuICAgIH1cbiAgICBpZiAobWFzayA9PSBcIm1lZGljYWxcIikge1xuICAgICAgICBpZiAobWFza1Bvc2l0aW9uID09IFwidGlnaHRcIikge1xuICAgICAgICAgICAgcmV0dXJuIDAuNFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwLjlcbiAgICB9XG4gICAgaWYgKG1hc2sgPT0gXCJvbmVfY290dG9uXCIpIHtcbiAgICAgICAgaWYgKG1hc2tQb3NpdGlvbiA9PSBcInRpZ2h0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiAwLjg1XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDAuOTVcbiAgICB9XG4gICAgaWYgKG1hc2sgPT0gXCJ0d29fY290dG9uXCIpIHtcbiAgICAgICAgaWYgKG1hc2tQb3NpdGlvbiA9PSBcInRpZ2h0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiAwLjdcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMC45NVxuICAgIH1cbiAgICBpZiAobWFzayA9PSBcImZmcDFcIikge1xuICAgICAgICBpZiAobWFza1Bvc2l0aW9uID09IFwidGlnaHRcIikge1xuICAgICAgICAgICAgcmV0dXJuIDAuMjVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMC42XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBObyBtYXNrIGNvZWZmaWNpZW50IGZvciAke21hc2t9IGFuZCAke21hc2tQb3NpdGlvbn1gKVxuICAgIHJldHVybiAxLjBcbn1cblxuZnVuY3Rpb24gZl9xYShhY3Rpdml0eSwgdmlydXMsIG1hc2tDb2VmZmljaWVudCkge1xuICBjb25zdCBSXzAgPSBSX1plcm8odmlydXMpO1xuICBjb25zdCBxXzAgPSAyLjc2MTggKiAoTWF0aC5leHAoMS4xNzYxICogUl8wKSAtIDEpO1xuXG4gIGNvbnN0IEVfMCA9IGZfRShcImxvd19hY3Rpdml0eVwiKTtcbiAgY29uc3QgRSA9IGZfRShhY3Rpdml0eSk7XG5cbiAgcmV0dXJuIG1hc2tDb2VmZmljaWVudCAqIHFfMCAqIChFIC8gRV8wKSAqIChRYlthY3Rpdml0eV0gLyBRYi5sb3dfYWN0aXZpdHkpO1xufVxuXG5mdW5jdGlvbiBmX3FhdGF1KHFhLCB0YXUpIHtcbiAgcmV0dXJuIHFhICogTWF0aC5leHAoLTAuNTc3NiAqIHRhdSk7XG59XG5cbmZ1bmN0aW9uIGZfQUNIKFYsIFEpIHtcbiAgcmV0dXJuIFEgLyBWO1xufVxuXG5mdW5jdGlvbiBmX0MocWEsIEFDSCwgUSwgdCkge1xuICAvLyBudW1lcmF0b3JcblxuICBsZXQgbiA9IDM5MDYyNSAqIEFDSCArIDIyNTYyNTtcbiAgLy8gY29uc29sZS5sb2cobik7XG4gIG4gPSBuICogTWF0aC5leHAoQUNIICogdCk7XG4gIC8vIGNvbnNvbGUubG9nKG4pO1xuICBuID0gbiAtIDIyNTYyNTtcbiAgLy8gY29uc29sZS5sb2cobik7XG4gIG4gPSBuICogTWF0aC5leHAoLUFDSCAqIHQgLSAoMzYxIC8gNjI1KSAqIHQpO1xuICAvLyBjb25zb2xlLmxvZyhuKTtcbiAgbiA9IDM5MDYyNSAqIEFDSCAtIG47XG4gIC8vIGNvbnNvbGUubG9nKG4pO1xuICBuID0gcWEgKiBuO1xuXG4gIC8vIGNvbnNvbGUubG9nKG4pO1xuICAvLyBjb25zb2xlLmxvZyhxYSk7XG4gIC8vIGNvbnNvbGUubG9nKEFDSCk7XG4gIC8vIGNvbnNvbGUubG9nKFEpO1xuICAvLyBjb25zb2xlLmxvZyhcInQ6IFwiICsgdCk7XG5cbiAgLy8gY29uc29sZS5sb2cobik7XG4gIC8vIGRlbm9taW5hdG9yXG4gIGxldCBkID0gUSAqICgyMjU2MjUgKiBBQ0ggKyAxMzAzMjEpO1xuICAvLyBjb25zb2xlLmxvZyhkKTtcblxuICByZXR1cm4gbiAvIGQ7XG59XG5cbmZ1bmN0aW9uIGZfQ3RhdShxYXRhdSwgQUNILCB0YXUsIFEsIHQpIHtcbiAgLy8gbnVtZXJhdG9yXG4gIC8vIGxldCBuID0gcWF0YXUgKiBNYXRoLmV4cCgtQUNIICogKHQgKyB0YXUpKSAqIChBQ0ggKiAodCAtIHRhdSkgKiBNYXRoLmV4cChBQ0ggKiAodCArIHRhdSkpIC0gTWF0aC5leHAoQUNIICogdCkgKyBNYXRoLmV4cChBQ0ggKiB0YXUpKTtcbiAgLy8gbGV0IG4gPSBxYXRhdSAqIE1hdGguZXhwKC1BQ0ggKiB0IC0gMSkgKiAoKEFDSCAqIHQgLSAxKSAqIE1hdGguZXhwKEFDSCAqIHQgKyAxKSAtIE1hdGguZXhwKEFDSCAqIHQpICsgTWF0aC5leHAoMSkpO1xuICBsZXQgbiA9IHFhdGF1ICogKEFDSCAqIHQgKyBNYXRoLmV4cCgtQUNIICogdCkgLSAxL01hdGguRSAtIDEpIC8vIHRoaXMgaXMgYSBzaW1wbGlmaWNhdGlvbiBvZiB0aGUgYWJvdmUgZ2VuZXJhdGVkIGJ5IHdvbGZyYW0gYWxwaGFcblxuICAvLyBkZW5vbWluYXRvclxuICBsZXQgZCA9IFEgKiBBQ0g7XG5cbiAgcmV0dXJuIG4gLyBkO1xufVxuXG5mdW5jdGlvbiBwaXJhKHQsIFEsIGFjdGl2aXR5LCB2aXJ1cywgViwgbWFza0NvZWZmaWNpZW50KSB7XG4gIGlmIChRID09IDApIFEgKz0gMC4wMTtcbiAgLy8gY29uc29sZS5sb2coYENhbGN1bGF0aW5nIHBpcmEgZm9yOiB0PSR7dH0sIFE9JHtRfSwgYWN0aXZpdHk9JHthY3Rpdml0eX0sIFY9JHtWfWApO1xuICBjb25zdCB0YXUgPSBmX3RhdShWLCBRKTtcbiAgLy8gY29uc29sZS5sb2coXCJ0YXU6IFwiICsgdGF1KTtcbiAgY29uc3QgcWEgPSBmX3FhKGFjdGl2aXR5LCB2aXJ1cywgbWFza0NvZWZmaWNpZW50KTtcbiAgLy8gY29uc29sZS5sb2coXCJxYTogXCIgKyBxYSk7XG4gIGNvbnN0IHFhdGF1ID0gZl9xYXRhdShxYSwgdGF1KTtcbiAgLy8gY29uc29sZS5sb2coXCJxYXRhdTogXCIgKyBxYXRhdSk7XG4gIGNvbnN0IEFDSCA9IGZfQUNIKFYsIFEpO1xuICAvLyBjb25zb2xlLmxvZyhcIkFDSDogXCIgKyBBQ0gpO1xuICAvLyBjb25zb2xlLmxvZyhcIlFiOiBcIiArIFFiW2FjdGl2aXR5XSk7XG5cbiAgaWYgKHQgPiB0YXUpIHtcbiAgICBjb25zdCBDID0gZl9DKHFhLCBBQ0gsIFEsIHRhdSk7XG4gICAgLy8gY29uc29sZS5sb2coQyk7XG4gICAgbGV0IEN0YXUgPSBmX0N0YXUocWF0YXUsIEFDSCwgdGF1LCBRLCB0KTtcbiAgICAvLyBpZiAoaXNOYU4oQ3RhdSkpIHtcbiAgICAvLyAgICAgQ3RhdSA9IDFcbiAgICAvLyB9XG4gICAgLy8gY29uc29sZS5sb2coQ3RhdSk7XG4gICAgcmV0dXJuIDEgLSBNYXRoLmV4cCgtKEMgKyBDdGF1KSAqIFFiW2FjdGl2aXR5XSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgQyA9IGZfQyhxYSwgQUNILCBRLCB0KTtcbiAgICAvLyBjb25zb2xlLmxvZyhDKTtcbiAgICByZXR1cm4gMSAtIE1hdGguZXhwKC1DICogUWJbYWN0aXZpdHldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlRGF0YSh2b2x1bWUsIGFjdGl2aXR5LCB2aXJ1cywgbWF4USwgbWFzaywgbWFza1Bvc2l0aW9uKSB7XG4gIGNvbnN0IFYgPSB2b2x1bWU7XG4gIGNvbnN0IG1hc2tDb2VmZmljaWVudCA9IGZfbWFzayhtYXNrLCBtYXNrUG9zaXRpb24pXG5cbiAgbGV0IHhBID0gW107XG4gIGxldCB5QSA9IFtdO1xuICBsZXQgcm93cyA9IFtdO1xuXG4gIGNvbnN0IG1pbiA9IDUwXG4gIGNvbnN0IG1heCA9IG1heFFcblxuICBmb3IgKGxldCBRID0gbWluOyBRIDw9IG1heDsgUSArPSA1MCkge1xuICAgIHhBID0gW107XG4gICAgbGV0IHJvdyA9IFtdO1xuXG4gICAgZm9yIChsZXQgdCA9IDAuMDsgdCA8PSA2LjA7IHQgKz0gMC4xKSB7XG4gICAgICAvLyBob3VycywrIGluY3JlbWVudHMgaW4gaG91cnNcbiAgICAgIHAgPSBwaXJhKHQsIFEsIGFjdGl2aXR5LCB2aXJ1cywgViwgbWFza0NvZWZmaWNpZW50KTtcbiAgICAgIC8vY29uc29sZS5sb2coXCJQaXJhIGZvciB0PVwiICsgdCArIFwiLCBRPVwiICsgUSArIFwiOiBcIiArIHApO1xuICAgICAgcCA9IE1hdGgucm91bmQocCAqIDEwMDAwKSAvIDEwMDtcbiAgICAgIC8vaWYgKHQgPT0gNiAmJiBRID09IDUwMCkgcCA9IDEwMDtcbiAgICAvLyAgIGlmIChpc05hTihwKSB8fCBwID49IDEwMCkge1xuICAgIC8vICAgICAgIHAgPSAwXG4gICAgLy8gICB9XG4gICAgICByb3cucHVzaChwKTtcbiAgICAgIHhBLnB1c2godCk7XG4gICAgfVxuICAgIHlBLnB1c2goUSk7XG4gICAgcm93cy5wdXNoKHJvdyk7XG4gIH1cblxuICAvLyBmb3IgKGxldCBtaW51dGUgPSAwOyBtaW51dGUgPD0gMzYwOyBtaW51dGUgKz0gMzApIHtcbiAgLy8gICAgIGxldCB0ID0gbWludXRlIC8gNjA7XG4gIC8vICAgICBsZXQgbSA9IG1pbnV0ZSAlIDYwO1xuICAvLyAgICAgbGV0IGggPSAobWludXRlIC0gbSkgLyA2MDtcbiAgLy8gICAgIGxldCB0aW1lID0gaCArIFwiOlwiICsgbSArIFwiaFwiO1xuICAvLyB9XG5cbiAgcmV0dXJuIHtcbiAgICB0ZXN0OiB4QSxcbiAgICB4OiB4QSxcbiAgICB5OiB5QSxcbiAgICB6OiByb3dzXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVEYXRhU2ltcGxlKHZvbHVtZSwgYWN0aXZpdHksIHZpcnVzLCBRLCBwZW9wbGUsIG1hc2ssIG1hc2tQb3NpdGlvbikge1xuICBjb25zdCBWID0gdm9sdW1lO1xuICBjb25zdCBtYXNrQ29lZmZpY2llbnQgPSBmX21hc2sobWFzaywgbWFza1Bvc2l0aW9uKVxuIFxuICBjb25zb2xlLmxvZyhgVG90YWwgYWlyZmxvdyBmb3IgYWxsIHBlb3BsZSBpbiB0aGUgcm9vbSBpcyAoUSkgaXMgJHtRfWApXG5cbiAgbGV0IHggPSBbXTtcbiAgbGV0IHkgPSBbXTsgLy8gcGlyYVxuICBsZXQgeDIgPSBbXTsgLy8gb25seSB0aW1lc3RhbXBzIGZvciB0aGUgZnVsbCBob3VyXG4gIGxldCB5MiA9IFtdOyAvLyBpbmZlY3RlZCBwZW9wbGVcblxuICBmb3IgKGxldCB0ID0gMDsgdCA8PSA2OyB0ICs9IDEpIHtcbiAgICBwID0gcGlyYSh0LCBRLCBhY3Rpdml0eSwgdmlydXMsIFYsIG1hc2tDb2VmZmljaWVudCk7XG4gICAgcCA9IE1hdGgucm91bmQocCAqIDEwMDAwKSAvIDEwMDtcbiAgICB5LnB1c2gocCk7XG4gICAgeC5wdXNoKHQpO1xuICAgIHgyLnB1c2godClcbiAgICB5Mi5wdXNoKE1hdGgucm91bmQocCAqIChwZW9wbGUgLSAxKS8gMTAwKSk7IC8vIHRoZSBpbmZlY3RlZCBwZXJzb24gY2Fubm90IGJlIGluZmVjdGVkIGFnYWluXG4gICAgLy8gaW50ZXJtZWRpYXRlIHN0ZXBzIGZvciBwaXJhIG9ubHksIG5vdCBmb3Igbm8uIGluZmVjdGVkIHBlb3BsZVxuICAgIGZvciAobGV0IHN0ID0gMC4xOyBzdCA8IDE7IHN0ICs9IDAuMSkge1xuICAgICAgICBwID0gcGlyYSh0ICsgc3QsIFEsIGFjdGl2aXR5LCB2aXJ1cywgViwgbWFza0NvZWZmaWNpZW50KTtcbiAgICAgICAgcCA9IE1hdGgucm91bmQocCAqIDEwMDAwKSAvIDEwMDtcbiAgICAgICAgeS5wdXNoKHApO1xuICAgICAgICB4LnB1c2godCArIHN0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5XG4gICAgfSxcbiAgICB7XG4gICAgICB4OiB4MixcbiAgICAgIHk6IHkyXG4gICAgfVxuICBdO1xuXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHByZXBhcmVEYXRhOiBwcmVwYXJlRGF0YSxcbiAgICBwcmVwYXJlRGF0YVNpbXBsZTogcHJlcGFyZURhdGFTaW1wbGUsXG4gICAgcGlyYTogcGlyYSxcbiAgICBmX3FhOiBmX3FhLFxuICAgIGZfUTogZl9RXG59XG4iLCJjb25zdCBkYXRhRiA9IHJlcXVpcmUoXCIuL2RhdGEuanNcIikucHJlcGFyZURhdGE7XG5jb25zdCBkYXRhRlNpbXBsZSA9IHJlcXVpcmUoXCIuL2RhdGEuanNcIikucHJlcGFyZURhdGFTaW1wbGU7XG5jb25zdCBmX1EgPSByZXF1aXJlKFwiLi9kYXRhLmpzXCIpLmZfUTtcbi8vIGNvbnN0IFBsb3RseSA9IHJlcXVpcmUoXCJwbG90bHkuanMtZ2wzZC1kaXN0LW1pblwiKSAvLyBub3QgaW5zdGFsbGVkIHZpYSBucG0gdG8gcmVkdWNlIGJ1bmRsZSBzaXplXG5cbnZhciB2b2x1bWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZvbHVtZVwiKS52YWx1ZTtcbnZhciBhY3Rpdml0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWN0aXZpdHlcIikudmFsdWU7XG52YXIgdmlydXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpcnVzXCIpLnZhbHVlO1xudmFyIG1hc2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hc2tcIikudmFsdWU7XG52YXIgbWFza1Bvc2l0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYXNrUG9zaXRpb25cIikudmFsdWU7XG4vLyB2YXIgdmlzdHlwZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlzdHlwZVwiKS52YWx1ZTtcbnZhciBtb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RlXCIpLnZhbHVlOyAvLyBzaW1wbGUgb3IgZXhwZXJ0XG52YXIgYWlyaW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhaXJpbmdcIikudmFsdWU7IC8vIGluIHRoZSBmb3JtdWxhLCB0aGlzIGlzIFFcbnZhciBwZW9wbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBlb3BsZVwiKS52YWx1ZTtcbnZhciBpc1EgPSAtMVxudmFyIGFkZFEgPSAwXG52YXIgdXNlZFEgPSAtMVxuY2FsY3VsYXRlVXNlZFEoKTtcbnZhciBtYXhRID0gLTE7XG5jYWxjdWxhdGVNYXhRKCk7XG5cbmNvbnN0IGNoYXJ0RGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaGFydFwiKTtcblxuZnVuY3Rpb24gbW9kZVVwZGF0ZWQobmV3TW9kZSkge1xuICBtb2RlID0gbmV3TW9kZTtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gdm9sdW1lVXBkYXRlZChuZXdWb2x1bWUpIHtcbiAgdm9sdW1lID0gbmV3Vm9sdW1lO1xuICB1cGRhdGVHcmFwaCgpO1xufVxuXG5mdW5jdGlvbiBhY3Rpdml0eVVwZGF0ZWQobmV3QWN0aXZpdHkpIHtcbiAgYWN0aXZpdHkgPSBuZXdBY3Rpdml0eTtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gdmlydXNVcGRhdGVkKG5ld1ZpcnVzKSB7XG4gICAgdmlydXMgPSBuZXdWaXJ1cztcbiAgICB1cGRhdGVHcmFwaCgpO1xuICB9XG5cbmZ1bmN0aW9uIG1hc2tVcGRhdGVkKG5ld01hc2spIHtcbiAgbWFzayA9IG5ld01hc2s7XG4gIHVwZGF0ZUdyYXBoKCk7XG59XG5cbmZ1bmN0aW9uIG1hc2tQb3NpdGlvblVwZGF0ZWQobmV3TWFza1Bvc2l0aW9uKSB7XG4gIG1hc2tQb3NpdGlvbiA9IG5ld01hc2tQb3NpdGlvbjtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gYWlyaW5nVXBkYXRlZChuZXdBaXJpbmcpIHtcbiAgYWlyaW5nID0gbmV3QWlyaW5nO1xuICBjYWxjdWxhdGVVc2VkUSgpXG4gIHVwZGF0ZUdyYXBoKCk7XG59XG5cbmZ1bmN0aW9uIHBlb3BsZVVwZGF0ZWQobmV3UGVvcGxlKSB7XG4gIHBlb3BsZSA9IG5ld1Blb3BsZTtcbiAgY2FsY3VsYXRlVXNlZFEoKVxuICBjYWxjdWxhdGVNYXhRKClcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gdmlzdHlwZVVwZGF0ZWQobmV3VmlzVHlwZSkge1xuICB2aXN0eXBlID0gbmV3VmlzVHlwZTtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuZnVuY3Rpb24gYWRkUVVwZGF0ZWQobmV3QWRkUSkge1xuICBhZGRRID0gbmV3QWRkUTtcbiAgY2FsY3VsYXRlVXNlZFEoKTtcbiAgdXBkYXRlR3JhcGgoKTtcbn1cblxuLy8gcmVjYWxjdWxhdGUgdXNlZFEgYmFzZWQgb24gYWlyaW5nIGFuZCBwZW9wbGVcbmZ1bmN0aW9uIGNhbGN1bGF0ZVVzZWRRKCkge1xuICBpc1EgPSBmX1EoYWlyaW5nKSAqIHBlb3BsZTtcbiAgdXNlZFEgPSBpc1EgKyBhZGRRO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlzUVwiKS52YWx1ZSA9IGlzUVxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVzZWRRXCIpLnZhbHVlID0gdXNlZFFcbn1cblxuLy8gbWF4USB1cGRhdGVkIGJ5IG1hbnVhbCB1c2VyIGlucHV0XG5mdW5jdGlvbiBtYXhRVXBkYXRlZChuZXdNYXhRKSB7XG4gIG1heFEgPSBuZXdNYXhRXG4gIHVwZGF0ZUdyYXBoKClcbn1cblxuLy8gcmVjYWxjdWxhdGUgbWF4USBiYXNlZCBvbiBwZW9wbGUgYW5kIHZlcnlfZ29vZCBhaXJpbmdcbmZ1bmN0aW9uIGNhbGN1bGF0ZU1heFEoKSB7XG4gIG1heFEgPSBmX1EoXCJ2ZXJ5X2dvb2RcIikgKiBwZW9wbGVcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYXhRXCIpLnZhbHVlID0gbWF4UVxufVxuXG5mdW5jdGlvbiB1cGRhdGVHcmFwaCgpIHtcbiAgY29uc29sZS5sb2coXCJUaGUgZ3JhcGggbXVzdCBiZSB1cGRhdGVkIVwiKTtcbiAgY29uc29sZS5sb2coYFZvbHVtZTogJHt2b2x1bWV9LCBhY3Rpdml0eTogJHthY3Rpdml0eX0sIGFpcmluZzogJHthaXJpbmd9YCk7XG5cbiAgaWYgKG1vZGUgPT09IFwic2ltcGxlXCIpIHtcbiAgICBkYXRhID0gZGF0YUZTaW1wbGUodm9sdW1lLCBhY3Rpdml0eSwgdmlydXMsIHVzZWRRLCBwZW9wbGUsIG1hc2ssIG1hc2tQb3NpdGlvbilcblxuICAgIGRyYXdTaW1wbGVQbG90KGRhdGEpXG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJleHBlcnRcIikge1xuICAgIGRhdGEgPSBkYXRhRih2b2x1bWUsIGFjdGl2aXR5LCB2aXJ1cywgbWF4USwgbWFzaywgbWFza1Bvc2l0aW9uKTtcblxuICAgIC8vIGlmICh2aXN0eXBlID09PSBcInN1cmZhY2VcIikge1xuICAgIC8vICAgZHJhd1N1cmZhY2VQbG90KGRhdGEpO1xuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICBkcmF3Q29udG91clBsb3QoZGF0YSk7XG4gICAgLy8gfVxuXG4gICAgZHJhd0NvbnRvdXJQbG90KGRhdGEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdTaW1wbGVQbG90KGRhdGEpIHtcbiAgZGF0YVswXS5tb2RlID0gXCJsaW5lc1wiO1xuICBkYXRhWzBdLm5hbWUgPSBcIlBJUkEgKGluICUpXCJcbiAgZGF0YVswXS55YXhpcyA9IFwieVwiXG5cbiAgZGF0YVsxXS50eXBlID0gXCJiYXJcIjtcbiAgZGF0YVsxXS55YXhpcyA9IFwieTJcIjtcbiAgZGF0YVsxXS5uYW1lID0gXCJQb3RlbnRpZWxsIEFuZ2VzdGVja3RlXCJcblxuICBjb25zb2xlLmxvZyhkYXRhKVxuXG4gIHZhciBsYXlvdXQgPSB7XG4gICAgc2hhcmVYOiB0cnVlLFxuICAgIHhheGlzOiB7XG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgdGV4dDogXCJaZWl0IGluIFN0dW5kZW5cIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgIHRpdGxlOiAnUElSQSAoaW4gJSknLFxuICAgICAgb3ZlcmxheWluZzogJ3kyJyxcbiAgICAgIHRpY2t2YWxzOiBbMTAsIDIwLCAzMCwgNDAsIDUwLCA2MCwgNzAsIDgwLCA5MCwgMTAwXSxcbiAgICAgIHJhbmdlOiBbMCwgMTAwXVxuICAgIH0sXG4gICAgeWF4aXMyOiB7XG4gICAgICB0aWNrbW9kZTogXCJhdXRvXCIsXG4gICAgICB0aXRsZTogJ0FuemFobCBzaWNoIHBvdGVudGllbGwgYW5nZXN0ZWNrdGVyIFBlcnNvbmVuIChnZXJ1bmRldCknLFxuICAgICAgc2lkZTogJ3JpZ2h0JyxcbiAgICAgIHJhbmdlOiBbMCwgcGVvcGxlIC0gMV0gLy8gdGhlIGluZmVjdGVkIHBlcnNvbiBjYW4gbm90IGJlIGluZmVjdGVkIGFnYWluXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgICAgeTogMSxcbiAgICAgICAgeDogMCxcbiAgICAgIH1cbiAgfTtcblxuICBQbG90bHkubmV3UGxvdChjaGFydERpdiwgZGF0YSwgbGF5b3V0LCB7IHJlc3BvbnNpdmU6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGRyYXdTdXJmYWNlUGxvdChkYXRhKSB7XG4gIGRhdGEudHlwZSA9IFwic3VyZmFjZVwiO1xuICBkYXRhLmNvbnRvdXJzID0ge1xuICAgIHo6IHtcbiAgICAgIHNob3c6IHRydWUsXG4gICAgICB1c2Vjb2xvcm1hcDogdHJ1ZSxcbiAgICAgIGhpZ2hsaWdodGNvbG9yOiBcIiM0MmY0NjJcIixcbiAgICAgIHByb2plY3Q6IHsgejogdHJ1ZSB9LFxuICAgIH0sXG4gIH07XG4gIGNvbnN0IGxheW91dCA9IHtcbiAgICB4YXhpczoge1xuICAgICAgdGl0bGU6IHtcbiAgICAgICAgdGV4dDogXCJaZWl0IGluIFN0dW5kZW5cIixcbiAgICAgIH0sXG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgdGl0bGU6IHtcbiAgICAgICAgdGV4dDogXCJGcmlzY2hsdWZ0bWVuZ2UgaW4gbV4zL2hcIixcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgUGxvdGx5Lm5ld1Bsb3QoY2hhcnREaXYsIFtkYXRhXSwgbGF5b3V0LCB7IHJlc3BvbnNpdmU6IHRydWUgfSk7XG59XG5cbmZ1bmN0aW9uIGRyYXdDb250b3VyUGxvdChkYXRhKSB7XG4gIGRhdGEudHlwZSA9IFwiY29udG91clwiO1xuXG4gIGRhdGEuY29sb3JiYXIgPSB7XG4gICAgdGl0bGU6IFwiUElSQVwiLFxuICAgIHRpY2tzdWZmaXg6IFwiJVwiLFxuICB9O1xuXG4gIGRhdGEuaG92ZXJ0ZW1wbGF0ZSA9IFwiUElSQTogJXt6Oi4yZn0lPGV4dHJhPjwvZXh0cmE+XCI7XG5cbiAgY29uc3QgbGF5b3V0ID0ge1xuICAgIHNob3dheGVzbGFiZWxzOiB0cnVlLFxuICAgIHhheGlzX3RpdGxlOiBcIlplaXQgaW4gU3R1bmRlblwiLFxuICAgIHhheGlzOiB7XG4gICAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiBcIlplaXQgaW4gU3R1bmRlblwiLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHlheGlzOiB7XG4gICAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiBcIkZyaXNjaGx1ZnRtZW5nZSBpbiBtwrMvaFwiLFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnNvbGUubG9nKGRhdGEpO1xuICBQbG90bHkubmV3UGxvdChjaGFydERpdiwgW2RhdGFdLCBsYXlvdXQsIHsgcmVzcG9uc2l2ZTogdHJ1ZSB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1vZGVVcGRhdGVkOiBtb2RlVXBkYXRlZCxcbiAgdm9sdW1lVXBkYXRlZDogdm9sdW1lVXBkYXRlZCxcbiAgYWN0aXZpdHlVcGRhdGVkOiBhY3Rpdml0eVVwZGF0ZWQsXG4gIHZpcnVzVXBkYXRlZDogdmlydXNVcGRhdGVkLFxuICBtYXNrVXBkYXRlZDogbWFza1VwZGF0ZWQsXG4gIG1hc2tQb3NpdGlvblVwZGF0ZWQ6IG1hc2tQb3NpdGlvblVwZGF0ZWQsXG4gIGFpcmluZ1VwZGF0ZWQ6IGFpcmluZ1VwZGF0ZWQsXG4gIHZpc3R5cGVVcGRhdGVkOiB2aXN0eXBlVXBkYXRlZCxcbiAgcGVvcGxlVXBkYXRlZDogcGVvcGxlVXBkYXRlZCxcbiAgYWRkUVVwZGF0ZWQ6IGFkZFFVcGRhdGVkLFxuICBtYXhRVXBkYXRlZDogbWF4UVVwZGF0ZWRcbn07XG4iLCJjb25zdCB2b2x1bWUgPSByZXF1aXJlKFwiLi92b2x1bWUuanNcIik7XG5jb25zdCBncmFwaCA9IHJlcXVpcmUoXCIuL2dyYXBoLmpzXCIpO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1vZGVcIikuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAvLyBpZiBleHBlcnQsIGhpZGUgc2ltcGxlIGh0bWwgZWxlbWVudHNcbiAgaWYgKGV2ZW50LnRhcmdldC52YWx1ZSA9PSBcImV4cGVydFwiKSB7XG4gICAgc2ltcGVsRWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic2ltcGxlXCIpXG4gICAgZm9yIChlbCBvZiBzaW1wZWxFbGVtZW50cykge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcbiAgICB9XG4gICAgZXhwZXJ0RWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiZXhwZXJ0XCIpXG4gICAgZm9yIChlbCBvZiBleHBlcnRFbGVtZW50cykge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiXG4gICAgfVxuICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC52YWx1ZSA9PSBcInNpbXBsZVwiKSB7XG4gICAgZXhwZXJ0RWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwic2ltcGxlXCIpXG4gICAgZm9yIChlbCBvZiBleHBlcnRFbGVtZW50cykge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiXG4gICAgfVxuICAgIGV4cGVydEVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImV4cGVydFwiKVxuICAgIGZvciAoZWwgb2YgZXhwZXJ0RWxlbWVudHMpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4gICAgfVxuICB9XG4gIGdyYXBoLm1vZGVVcGRhdGVkKGV2ZW50LnRhcmdldC52YWx1ZSlcbn0pO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFjdGl2aXR5XCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgZ3JhcGguYWN0aXZpdHlVcGRhdGVkKGV2ZW50LnRhcmdldC52YWx1ZSk7XG59KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aXJ1c1wiKS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZ3JhcGgudmlydXNVcGRhdGVkKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gIH0pO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1hc2tcIikuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICBncmFwaC5tYXNrVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpO1xufSk7XG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWFza1Bvc2l0aW9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgZ3JhcGgubWFza1Bvc2l0aW9uVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpO1xufSk7XG5cbi8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlzdHlwZVwiKS5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4vLyAgIGdyYXBoLnZpc3R5cGVVcGRhdGVkKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4vLyB9KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwZW9wbGVcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlICE9IFwiXCIpIHtcbiAgICAgIGlmIChldmVudC50YXJnZXQudmFsdWUgPCAxKSB7XG4gICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IDFcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlID4gMTAwKSB7XG4gICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IDEwMFxuICAgICAgfVxuICAgICAgZ3JhcGgucGVvcGxlVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH1cbn0pO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFpcmluZ1wiKS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgZ3JhcGguYWlyaW5nVXBkYXRlZChldmVudC50YXJnZXQudmFsdWUpXG59KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZGRRXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlIDwgMCkge1xuICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSAwXG4gICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQudmFsdWUgPiA1MDAwKSB7XG4gICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IDUwMDBcbiAgICB9XG4gICAgZ3JhcGguYWRkUVVwZGF0ZWQocGFyc2VJbnQoZXZlbnQudGFyZ2V0LnZhbHVlKSlcbn0pO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1heFFcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQudmFsdWUgPCAxMDApIHtcbiAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gMTAwXG4gICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQudmFsdWUgPiA2MDAwKSB7XG4gICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IDYwMDBcbiAgICB9XG4gICAgZ3JhcGgubWF4UVVwZGF0ZWQoZXZlbnQudGFyZ2V0LnZhbHVlKVxufSk7IiwiY29uc3QgZ3JhcGggPSByZXF1aXJlKFwiLi9ncmFwaC5qc1wiKTtcblxuZnVuY3Rpb24gSW5wdXRFbGVtZW50KGVsZW1lbnQsIGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgZWxlbWVudC52YWx1ZSA9IGRhdGE7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLCBmYWxzZSk7XG59XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gdGhlIGlucHV0IGVsZW1lbnQgaXMgdXBkYXRlZCwgZS5nLiwgYnkgdXNpbmcgYXJyb3dzIHdoZW4gdHlwZT1udW1iZXIgb3IgYnkgcHJlc3NpbmcgZW50ZXJcbiAqL1xuSW5wdXRFbGVtZW50LnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICBjYXNlIFwiY2hhbmdlXCI6XG4gICAgICB0aGlzLmNoYW5nZSh0aGlzLmVsZW1lbnQudmFsdWUpO1xuICAgICAgdXBkYXRlVm9sdW1lKCk7XG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIHRoZSBlbGVtZW50OyB0aGlzIG1ldGhvZCB1cGRhdGVzIHRoZSBET00gcmVwcmVzZW50YXRpb24gYW5kIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxuICovXG5JbnB1dEVsZW1lbnQucHJvdG90eXBlLmNoYW5nZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB0aGlzLmRhdGEgPSB2YWx1ZTtcbiAgdGhpcy5lbGVtZW50LnZhbHVlID0gdmFsdWU7XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVWb2x1bWUoKSB7XG4gIGlmIChsZW5ndGhFbGVtZW50LmRhdGEgPiAxMCkge1xuICAgIGxlbmd0aEVsZW1lbnQuY2hhbmdlKDEwKVxuICB9XG4gIGlmIChsZW5ndGhFbGVtZW50LmRhdGEgPCAxKSB7XG4gICAgbGVuZ3RoRWxlbWVudC5jaGFuZ2UoMSlcbiAgfVxuXG4gIGlmICh3aWR0aEVsZW1lbnQuZGF0YSA+IDEwKSB7XG4gICAgd2lkdGhFbGVtZW50LmNoYW5nZSgxMClcbiAgfVxuICBpZiAod2lkdGhFbGVtZW50LmRhdGEgPCAxKSB7XG4gICAgd2lkdGhFbGVtZW50LmNoYW5nZSgxKVxuICB9XG5cbiAgaWYgKGhlaWdodEVsZW1lbnQuZGF0YSA+IDUpIHtcbiAgICBoZWlnaHRFbGVtZW50LmNoYW5nZSg1KVxuICB9XG4gIGlmIChoZWlnaHRFbGVtZW50LmRhdGEgPCAxKSB7XG4gICAgaGVpZ2h0RWxlbWVudC5jaGFuZ2UoMSlcbiAgfVxuXG4gIGNvbnN0IHZvbHVtZSA9IGxlbmd0aEVsZW1lbnQuZGF0YSAqIHdpZHRoRWxlbWVudC5kYXRhICogaGVpZ2h0RWxlbWVudC5kYXRhO1xuICBjb25zb2xlLmxvZyh2b2x1bWUpO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZvbHVtZVwiKS52YWx1ZSA9IHZvbHVtZTtcbiAgZ3JhcGgudm9sdW1lVXBkYXRlZCh2b2x1bWUpO1xuICByZXR1cm4gdm9sdW1lO1xufVxuXG4vLyBpdCBpcyBwb3NzaWJsZSB0byB1cGRhdGUgdGhlc2UgZWxlbWVudHMsIGUuZy4sIHdpdGggbGVuZ3RoRWxlbWVudC5jaGFuZ2UoMTApXG52YXIgbGVuZ3RoRWxlbWVudCA9IG5ldyBJbnB1dEVsZW1lbnQoXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVuZ3RoXCIpLFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlbmd0aFwiKS52YWx1ZVxuKTtcbnZhciB3aWR0aEVsZW1lbnQgPSBuZXcgSW5wdXRFbGVtZW50KFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndpZHRoXCIpLFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndpZHRoXCIpLnZhbHVlXG4pO1xudmFyIGhlaWdodEVsZW1lbnQgPSBuZXcgSW5wdXRFbGVtZW50KFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhlaWdodFwiKSxcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWlnaHRcIikudmFsdWVcbik7XG51cGRhdGVWb2x1bWUoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldDogdXBkYXRlVm9sdW1lLFxuICBpbml0OiB1cGRhdGVWb2x1bWUsXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==