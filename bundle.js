!function(e){var t={};function n(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(a,o,function(t){return e[t]}.bind(null,o));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){const n={low_activity_lying:.45,low_activity:.54,singing:.65,mid_activity:.9,sports:1.2,test_1:.54,test_2:.65};function a(e){return"singing"==e?3500:"test_2"==e?2500:100}function o(e,t){return"no"==e?1:"medical"==e?"tight"==t?.4:.9:"one_cotton"==e?"tight"==t?.85:.95:"two_cotton"==e?"tight"==t?.7:.95:"ffp1"==e?"tight"==t?.25:.6:(console.log(`No mask coefficient for ${e} and ${t}`),1)}function i(e,t,o){const i=function(e){switch(console.log(e),e){case"standard":return 3.35;case"mutated":return 4}}(t),l=2.7618*(Math.exp(1.1761*i)-1),u=a("low_activity");return o*l*(a(e)/u)*(n[e]/n.low_activity)}function l(e,t,n,a){let o=390625*t+225625;return o*=Math.exp(t*a),o-=225625,o*=Math.exp(-t*a-.5776*a),o=390625*t-o,o*=e,o/(n*(225625*t+130321))}function u(e,t,a,o,u,d){0==t&&(t+=.01);const r=function(e,t){return e/t}(u,t),c=i(a,o,d),s=function(e,t){return e*Math.exp(-.5776*t)}(c,r),m=function(e,t){return t/e}(u,t);if(e>r){const o=l(c,m,t,r);let i=function(e,t,n,a,o){return e*(t*o+Math.exp(-t*o)-1/Math.E-1)/(a*t)}(s,m,0,t,e);return 1-Math.exp(-(o+i)*n[a])}{const o=l(c,m,t,e);return 1-Math.exp(-o*n[a])}}e.exports={prepareData:function(e,t,n,a,i,l){const d=e,r=o(i,l);let c=[],s=[],m=[];const g=a;for(let e=50;e<=g;e+=50){c=[];let a=[];for(let o=0;o<=6;o+=.1)p=u(o,e,t,n,d,r),p=Math.round(1e4*p)/100,a.push(p),c.push(o);s.push(e),m.push(a)}return{test:c,x:c,y:s,z:m}},prepareDataSimple:function(e,t,n,a,i,l,d){const r=e,c=o(l,d);console.log("Total airflow for all people in the room is (Q) is "+a);let s=[],m=[],g=[],f=[];for(let e=0;e<=6;e+=1){p=u(e,a,t,n,r,c),p=Math.round(1e4*p)/100,m.push(p),s.push(e),g.push(e),f.push(Math.round(p*(i-1)/100));for(let o=.1;o<1;o+=.1)p=u(e+o,a,t,n,r,c),p=Math.round(1e4*p)/100,m.push(p),s.push(e+o)}return[{x:s,y:m},{x:g,y:f}]},pira:u,f_qa:i,f_Q:function(e){return"very_bad"==e?10:"bad"==e?20:"ok"==e?30:"good"==e?40:"very_good"==e?60:void 0}}},function(e,t,n){const a=n(0).prepareData,o=n(0).prepareDataSimple,i=n(0).f_Q;var l=document.getElementById("volume").value,u=document.getElementById("activity").value,d=document.getElementById("virus").value,r=document.getElementById("mask").value,c=document.getElementById("maskPosition").value,s=document.getElementById("mode").value,m=document.getElementById("airing").value,p=document.getElementById("people").value,g=-1,f=0,v=-1;E();var y=-1;x();const h=document.getElementById("chart");function E(){g=i(m)*p,v=g+f,document.getElementById("isQ").value=g,document.getElementById("usedQ").value=v}function x(){y=i("very_good")*p,document.getElementById("maxQ").value=y}function I(){console.log("The graph must be updated!"),console.log(`Volume: ${l}, activity: ${u}, airing: ${m}`),"simple"===s?(data=o(l,u,d,v,p,r,c),function(e){e[0].mode="lines",e[0].name="PIRA (in %)",e[0].yaxis="y",e[1].type="bar",e[1].yaxis="y2",e[1].name="Potentiell Angesteckte",console.log(e);var t={shareX:!0,xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:"PIRA (in %)",overlaying:"y2",tickvals:[10,20,30,40,50,60,70,80,90,100],range:[0,100]},yaxis2:{tickmode:"auto",title:"Anzahl sich potentiell angesteckter Personen (gerundet)",side:"right",range:[0,p-1]},legend:{y:1,x:0}};Plotly.newPlot(h,e,t,{responsive:!0})}(data)):"expert"===s&&(data=a(l,u,d,y,r,c),function(e){e.type="contour",e.colorbar={title:"PIRA",ticksuffix:"%"},e.hovertemplate="PIRA: %{z:.2f}%<extra></extra>";console.log(e),Plotly.newPlot(h,[e],{showaxeslabels:!0,xaxis_title:"Zeit in Stunden",xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:{text:"Frischluftmenge in mÂ³/h"}}},{responsive:!0})}(data))}e.exports={modeUpdated:function(e){s=e,I()},volumeUpdated:function(e){l=e,I()},activityUpdated:function(e){u=e,I()},virusUpdated:function(e){d=e,I()},maskUpdated:function(e){r=e,I()},maskPositionUpdated:function(e){c=e,I()},airingUpdated:function(e){m=e,E(),I()},vistypeUpdated:function(e){vistype=e,I()},peopleUpdated:function(e){p=e,E(),x(),I()},addQUpdated:function(e){f=e,E(),I()},maxQUpdated:function(e){y=e,I()}}},function(e,t,n){n(3);const a=n(1);document.getElementById("mode").addEventListener("input",(function(e){if("expert"==e.target.value){for(el of(simpleElements=document.getElementsByClassName("simple"),simpleElements))el.style.display="none";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="block"}else if("simple"==e.target.value){for(el of(expertElements=document.getElementsByClassName("simple"),expertElements))el.style.display="block";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="none"}a.modeUpdated(e.target.value)})),document.getElementById("activity").addEventListener("input",(function(e){a.activityUpdated(e.target.value)})),document.getElementById("virus").addEventListener("input",(function(e){a.virusUpdated(e.target.value),"mutated"==e.target.value?document.getElementById("mutationdisclaimer").style.display="block":document.getElementById("mutationdisclaimer").style.display="none"})),document.getElementById("mask").addEventListener("input",(function(e){a.maskUpdated(e.target.value)})),document.getElementById("maskPosition").addEventListener("input",(function(e){a.maskPositionUpdated(e.target.value)})),document.getElementById("people").addEventListener("change",(function(e){""!=e.target.value&&(e.target.value<1?e.target.value=1:e.target.value>100&&(e.target.value=100),a.peopleUpdated(e.target.value))})),document.getElementById("airing").addEventListener("change",(function(e){a.airingUpdated(e.target.value)})),document.getElementById("addQ").addEventListener("change",(function(e){e.target.value<0?e.target.value=0:e.target.value>5e3&&(e.target.value=5e3),a.addQUpdated(parseInt(e.target.value))})),document.getElementById("maxQ").addEventListener("change",(function(e){e.target.value<100?e.target.value=100:e.target.value>6e3&&(e.target.value=6e3),a.maxQUpdated(e.target.value)}))},function(e,t,n){const a=n(1);function o(e,t){this.data=t,this.element=e,e.value=t,e.addEventListener("change",this,!1)}function i(){l.data>10&&l.change(10),l.data<1&&l.change(1),u.data>10&&u.change(10),u.data<1&&u.change(1),d.data>5&&d.change(5),d.data<1&&d.change(1);const e=l.data*u.data*d.data;return console.log(e),document.getElementById("volume").value=e,a.volumeUpdated(e),e}o.prototype.handleEvent=function(e){switch(e.type){case"change":this.change(this.element.value),i()}},o.prototype.change=function(e){this.data=e,this.element.value=e};var l=new o(document.getElementById("length"),document.getElementById("length").value),u=new o(document.getElementById("width"),document.getElementById("width").value),d=new o(document.getElementById("height"),document.getElementById("height").value);i(),e.exports={get:i,init:i}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,