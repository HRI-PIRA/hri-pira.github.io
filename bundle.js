!function(e){var t={};function n(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(a,o,function(t){return e[t]}.bind(null,o));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){const n={low_activity_lying:.45,low_activity:.54,singing:.65,mid_activity:.9,sports:1.2,test_1:.54,test_2:.65};function a(e){return"singing"==e?3500:"test_2"==e?2500:100}function o(e,t){return"no"==e?1:"medical"==e?"tight"==t?.4:.9:"one_cotton"==e?"tight"==t?.85:.95:"two_cotton"==e?"tight"==t?.7:.95:"ffp1"==e?"tight"==t?.25:.6:(console.log(`No mask coefficient for ${e} and ${t}`),1)}function l(e,t){const o=2.7618*(Math.exp(1.1761*3.35)-1),l=a("low_activity");return t*o*(a(e)/l)*(n[e]/n.low_activity)}function i(e,t,n,a){let o=390625*t+225625;return o*=Math.exp(t*a),o-=225625,o*=Math.exp(-t*a-.5776*a),o=390625*t-o,o*=e,o/(n*(225625*t+130321))}function u(e,t,a,o,u){0==t&&(t+=.01);const d=function(e,t){return e/t}(o,t),r=l(a,u),c=function(e,t){return e*Math.exp(-.5776*t)}(r,d),s=function(e,t){return t/e}(o,t);if(e>d){const o=i(r,s,t,d);let l=function(e,t,n,a,o){return e*(t*o+Math.exp(-t*o)-1/Math.E-1)/(a*t)}(c,s,0,t,e);return 1-Math.exp(-(o+l)*n[a])}{const o=i(r,s,t,e);return 1-Math.exp(-o*n[a])}}e.exports={prepareData:function(e,t,n,a,l){const i=e,d=o(a,l);let r=[],c=[],s=[];const m=n;for(let e=50;e<=m;e+=50){r=[];let n=[];for(let a=0;a<=6;a+=.1)p=u(a,e,t,i,d),p=Math.round(1e4*p)/100,n.push(p),r.push(a);c.push(e),s.push(n)}return{test:r,x:r,y:c,z:s}},prepareDataSimple:function(e,t,n,a,l,i){const d=e,r=o(l,i);console.log("Total airflow for all people in the room is (Q) is "+n);let c=[],s=[],m=[],g=[];for(let e=0;e<=6;e+=1){p=u(e,n,t,d,r),p=Math.round(1e4*p)/100,s.push(p),c.push(e),m.push(e),g.push(Math.round(p*(a-1)/100));for(let a=.1;a<1;a+=.1)p=u(e+a,n,t,d,r),p=Math.round(1e4*p)/100,s.push(p),c.push(e+a)}return[{x:c,y:s},{x:m,y:g}]},pira:u,f_qa:l,f_Q:function(e){return"very_bad"==e?10:"bad"==e?20:"ok"==e?30:"good"==e?40:"very_good"==e?60:void 0}}},function(e,t,n){const a=n(0).prepareData,o=n(0).prepareDataSimple,l=n(0).f_Q;var i=document.getElementById("volume").value,u=document.getElementById("activity").value,d=document.getElementById("mask").value,r=document.getElementById("maskPosition").value,c=document.getElementById("mode").value,s=document.getElementById("airing").value,p=document.getElementById("people").value,m=-1,g=0,f=-1;h();var v=-1;x();const y=document.getElementById("chart");function h(){m=l(s)*p,f=m+g,document.getElementById("isQ").value=m,document.getElementById("usedQ").value=f}function x(){v=l("very_good")*p,document.getElementById("maxQ").value=v}function E(){console.log("The graph must be updated!"),console.log(`Volume: ${i}, activity: ${u}, airing: ${s}`),"simple"===c?(data=o(i,u,f,p,d,r),function(e){e[0].mode="lines",e[0].name="PIRA (in %)",e[0].yaxis="y",e[1].type="bar",e[1].yaxis="y2",e[1].name="Potentiell Angesteckte",console.log(e);var t={shareX:!0,xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:"PIRA (in %)",overlaying:"y2",tickvals:[10,20,30,40,50,60,70,80,90,100],range:[0,100]},yaxis2:{tickmode:"auto",title:"Anzahl sich potentiell angesteckter Personen (gerundet)",side:"right",range:[0,p-1]},legend:{y:1,x:0}};Plotly.newPlot(y,e,t,{responsive:!0})}(data)):"expert"===c&&(data=a(i,u,v,d,r),function(e){e.type="contour",e.colorbar={title:"PIRA",ticksuffix:"%"},e.hovertemplate="PIRA: %{z:.2f}%<extra></extra>";console.log(e),Plotly.newPlot(y,[e],{showaxeslabels:!0,xaxis_title:"Zeit in Stunden",xaxis:{title:{text:"Zeit in Stunden"}},yaxis:{title:{text:"Frischluftmenge in mÂ³/h"}}},{responsive:!0})}(data))}e.exports={modeUpdated:function(e){c=e,E()},volumeUpdated:function(e){i=e,E()},activityUpdated:function(e){u=e,E()},maskUpdated:function(e){d=e,E()},maskPositionUpdated:function(e){r=e,E()},airingUpdated:function(e){s=e,h(),E()},vistypeUpdated:function(e){vistype=e,E()},peopleUpdated:function(e){p=e,h(),x(),E()},addQUpdated:function(e){g=e,h(),E()},maxQUpdated:function(e){v=e,E()}}},function(e,t,n){n(3);const a=n(1);document.getElementById("mode").addEventListener("input",(function(e){if("expert"==e.target.value){for(el of(simpelElements=document.getElementsByClassName("simple"),simpelElements))el.style.display="none";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="block"}else if("simple"==e.target.value){for(el of(expertElements=document.getElementsByClassName("simple"),expertElements))el.style.display="block";for(el of(expertElements=document.getElementsByClassName("expert"),expertElements))el.style.display="none"}a.modeUpdated(e.target.value)})),document.getElementById("activity").addEventListener("input",(function(e){a.activityUpdated(e.target.value)})),document.getElementById("mask").addEventListener("input",(function(e){a.maskUpdated(e.target.value)})),document.getElementById("maskPosition").addEventListener("input",(function(e){a.maskPositionUpdated(e.target.value)})),document.getElementById("people").addEventListener("change",(function(e){""!=e.target.value&&(e.target.value<1?e.target.value=1:e.target.value>100&&(e.target.value=100),a.peopleUpdated(e.target.value))})),document.getElementById("airing").addEventListener("change",(function(e){a.airingUpdated(e.target.value)})),document.getElementById("addQ").addEventListener("change",(function(e){e.target.value<0?e.target.value=0:e.target.value>5e3&&(e.target.value=5e3),a.addQUpdated(parseInt(e.target.value))})),document.getElementById("maxQ").addEventListener("change",(function(e){e.target.value<100?e.target.value=100:e.target.value>6e3&&(e.target.value=6e3),a.maxQUpdated(e.target.value)}))},function(e,t,n){const a=n(1);function o(e,t){this.data=t,this.element=e,e.value=t,e.addEventListener("change",this,!1)}function l(){i.data>10&&i.change(10),i.data<1&&i.change(1),u.data>10&&u.change(10),u.data<1&&u.change(1),d.data>5&&d.change(5),d.data<1&&d.change(1);const e=i.data*u.data*d.data;return console.log(e),document.getElementById("volume").value=e,a.volumeUpdated(e),e}o.prototype.handleEvent=function(e){switch(e.type){case"change":this.change(this.element.value),l()}},o.prototype.change=function(e){this.data=e,this.element.value=e};var i=new o(document.getElementById("length"),document.getElementById("length").value),u=new o(document.getElementById("width"),document.getElementById("width").value),d=new o(document.getElementById("height"),document.getElementById("height").value);l(),e.exports={get:l,init:l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,